2023-08-06 00:03:11,596	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/test_2.sh
run_timeout = 5287
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-06 00:03:11,597	[INFO]	==== WARMUP ====
2023-08-06 01:18:35,216	[INFO]	WARM    SUCCESS               8210426038037           
2023-08-06 01:18:35,217	[INFO]	INITIAL SUCCESS               8210426038037           
2023-08-06 01:18:35,217	[INFO]	==== START: ValidTest ====
2023-08-06 01:18:35,403	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 120)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 289)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 10), ('core/Solver.cc.xml', 'stmt', 309)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 285), ('core/Solver.cc.xml', 'stmt', 172)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 81)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 43), ('core/Solver.cc.xml', 'stmt', 386)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 423))
2023-08-06 01:18:35,403	[DEBUG]	CLEAN_SIZE: 10 (was 10)
2023-08-06 02:30:12,126	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 120)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 289)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 10), ('core/Solver.cc.xml', 'stmt', 309)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 285), ('core/Solver.cc.xml', 'stmt', 172)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 81)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 43), ('core/Solver.cc.xml', 'stmt', 386)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 423))
2023-08-06 02:30:12,127	[INFO]	1       SUCCESS              *7419055909991 (90.36%) [10 edit(s)] 
2023-08-06 02:30:12,152	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -140,6 +140,9 @@
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
+    if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
     activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
@@ -172,14 +175,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    conflict.clear();
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -254,16 +250,12 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
 bool Solver::satisfied(const Clause& c) const {
-    for (int i = 0; i < c.size(); i++)/*auto*/{
-        if (value(c[i]) == l_True)/*auto*/{
-            return true;
-}/*auto*/
-}/*auto*/
+    
     return false; }
 
 
@@ -342,7 +334,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -352,7 +344,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                
 }/*auto*/
         }
 
@@ -695,7 +687,8 @@
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
+        for (int j = 0; j < analyze_toclear.size(); j++)/*auto*/{ seen[var(analyze_toclear[j])] = 0;
+}/*auto*/
 }/*auto*/
 
     #define V learnts
@@ -704,7 +697,7 @@
             V[j++] = V[i];
 }/*auto*/
 }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -797,21 +790,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -1004,9 +983,7 @@
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
-        if (value(c[i]) != l_False)/*auto*/{
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-}/*auto*/
+        
 }/*auto*/
     fprintf(f, "0\n");
 }

2023-08-06 02:30:12,175	[INFO]	==== END ====
2023-08-06 02:30:12,175	[INFO]	Reason: validation end
2023-08-06 02:30:12,175	[INFO]	
2023-08-06 02:30:12,175	[INFO]	==== REPORT ====
2023-08-06 02:30:12,175	[INFO]	Termination: validation end
2023-08-06 02:30:12,175	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691276588.log
2023-08-06 02:30:12,196	[INFO]	Patch file: _magpie_logs/minisat-hack_1691276588.patch
2023-08-06 02:30:12,196	[INFO]	Diff file: _magpie_logs/minisat-hack_1691276588.diff
2023-08-06 02:30:12,196	[INFO]	Best fitness: 7419055909991
2023-08-06 02:30:12,196	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 120)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 289)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 10), ('core/Solver.cc.xml', 'stmt', 309)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 285), ('core/Solver.cc.xml', 'stmt', 172)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 81)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 43), ('core/Solver.cc.xml', 'stmt', 386)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 423))
2023-08-06 02:30:12,196	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -140,6 +140,9 @@
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
+    if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
     activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
@@ -172,14 +175,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    conflict.clear();
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -254,16 +250,12 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
 bool Solver::satisfied(const Clause& c) const {
-    for (int i = 0; i < c.size(); i++)/*auto*/{
-        if (value(c[i]) == l_True)/*auto*/{
-            return true;
-}/*auto*/
-}/*auto*/
+    
     return false; }
 
 
@@ -342,7 +334,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -352,7 +344,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                
 }/*auto*/
         }
 
@@ -695,7 +687,8 @@
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
+        for (int j = 0; j < analyze_toclear.size(); j++)/*auto*/{ seen[var(analyze_toclear[j])] = 0;
+}/*auto*/
 }/*auto*/
 
     #define V learnts
@@ -704,7 +697,7 @@
             V[j++] = V[i];
 }/*auto*/
 }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -797,21 +790,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -1004,9 +983,7 @@
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
-        if (value(c[i]) != l_False)/*auto*/{
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-}/*auto*/
+        
 }/*auto*/
     fprintf(f, "0\n");
 }

