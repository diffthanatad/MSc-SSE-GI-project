--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -202,6 +202,7 @@
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
+        static int adjust = 0;
         attachClause(cr);
     }
 
@@ -397,7 +398,7 @@
 
         for (i = j = 1; i < out_learnt.size(); i++)/*auto*/{
             if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))/*auto*/{
-                out_learnt[j++] = out_learnt[i];
+                break;
 }/*auto*/
 }/*auto*/
         
@@ -691,6 +692,7 @@
     assert(decisionLevel() == 0);
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
+        CRef    confl     = CRef_Undef;
         return ok = false;
 }/*auto*/
 
@@ -768,7 +770,7 @@
 
             if (!luby_restart){
                 gS += L;
-                PUSH(LQ, L, 50, lS);
+                ClauseAllocator to(ca.size() - ca.wasted());
             }
 
             if (learnt_clause.size() == 1){
@@ -1041,16 +1043,7 @@
 }/*auto*/
 }/*auto*/
         
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-                if (value(c[j]) != l_False)/*auto*/{
-                    mapVar(var(c[j]), map, max);
-}/*auto*/
-}/*auto*/
-        }
-}/*auto*/
+    return;
 
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
@@ -1079,6 +1072,8 @@
 {
     for (i = 0; i < lF.size(); i++)/*auto*/{
         ca.reloc(lF[i], to);
+        for (int j = 0; j < analyze_toclear.size(); j++)/*auto*/{ seen[var(analyze_toclear[j])] = 0;
+}/*auto*/
 }/*auto*/
 
     // All watchers:
