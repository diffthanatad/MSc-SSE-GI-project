2023-08-05 16:45:33,936	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_10.sh
run_timeout = 1518
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-05 16:45:33,937	[INFO]	==== WARMUP ====
2023-08-05 17:02:45,254	[INFO]	WARM    SUCCESS               1729024213771           
2023-08-05 17:02:45,254	[INFO]	INITIAL SUCCESS               1729024213771           
2023-08-05 17:02:45,255	[INFO]	==== START: ValidTest ====
2023-08-05 17:02:45,384	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 340), ('core/Solver.cc.xml', 'stmt', 335)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 221), ('core/Solver.cc.xml', 'stmt', 399)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 293)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 576), ('core/Solver.cc.xml', 'stmt', 205)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 118), ('core/Solver.cc.xml', 'stmt', 162)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 50), ('core/Solver.cc.xml', 'stmt', 219))
2023-08-05 17:02:45,384	[DEBUG]	CLEAN_SIZE: 7 (was 7)
2023-08-05 17:22:24,695	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 340), ('core/Solver.cc.xml', 'stmt', 335)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 221), ('core/Solver.cc.xml', 'stmt', 399)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 293)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 576), ('core/Solver.cc.xml', 'stmt', 205)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 118), ('core/Solver.cc.xml', 'stmt', 162)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 50), ('core/Solver.cc.xml', 'stmt', 219))
2023-08-05 17:22:24,696	[INFO]	1       SUCCESS              *2011262316707 (116.32%) [7 edit(s)] 
2023-08-05 17:22:24,717	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -194,7 +194,7 @@
     }*/
 
     if (ps.size() == 0)/*auto*/{
-        return ok = false;
+        vec<Watcher>&  ws  = watches[p];
 }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
@@ -349,7 +349,9 @@
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                if (out_learnt.size() == 1)/*auto*/{
+        out_btlevel = 0;
+}/*auto*/
                 core_added++;
             }else/*auto*/{
                 claBumpActivity(c);
@@ -528,7 +530,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -556,7 +558,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        int curr_restarts = 0;
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -710,7 +712,7 @@
     removeSatisfied(learnts);
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
+        
 }/*auto*/
     checkGarbage();
     rebuildOrderHeap();
@@ -819,7 +821,21 @@
                !luby_restart && LQ.size() == 50 && lS / 50. * K > gS / conflicts){// || !withinBudget()){
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
-                progress_estimate = progressEstimate();
+                if (conflicts % 5000 == 0){
+                //learntsize_adjust_confl *= learntsize_adjust_inc;
+                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                //max_learnts             *= learntsize_inc;
+
+                if (verbosity >= 1)/*auto*/{
+                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                           (int)conflicts, 
+                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                           starts, conflicts / starts,
+                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+}/*auto*/
+            }
                 cancelUntil(0);
                 return l_Undef; }
 
@@ -1000,7 +1016,11 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ for (int j = 1; j < c.size(); j++)/*auto*/{
+                    if (level(var(c[j])) > 0)/*auto*/{
+                        seen[var(c[j])] = 1;
+}/*auto*/
+}/*auto*/return;
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{

2023-08-05 17:22:24,734	[INFO]	==== END ====
2023-08-05 17:22:24,734	[INFO]	Reason: validation end
2023-08-05 17:22:24,735	[INFO]	
2023-08-05 17:22:24,735	[INFO]	==== REPORT ====
2023-08-05 17:22:24,735	[INFO]	Termination: validation end
2023-08-05 17:22:24,735	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691250331.log
2023-08-05 17:22:24,752	[INFO]	Patch file: _magpie_logs/minisat-hack_1691250331.patch
2023-08-05 17:22:24,752	[INFO]	Diff file: _magpie_logs/minisat-hack_1691250331.diff
2023-08-05 17:22:24,752	[INFO]	Best fitness: 2011262316707
2023-08-05 17:22:24,752	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 340), ('core/Solver.cc.xml', 'stmt', 335)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 221), ('core/Solver.cc.xml', 'stmt', 399)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 293)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 576), ('core/Solver.cc.xml', 'stmt', 205)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 118), ('core/Solver.cc.xml', 'stmt', 162)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 50), ('core/Solver.cc.xml', 'stmt', 219))
2023-08-05 17:22:24,752	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -194,7 +194,7 @@
     }*/
 
     if (ps.size() == 0)/*auto*/{
-        return ok = false;
+        vec<Watcher>&  ws  = watches[p];
 }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
@@ -349,7 +349,9 @@
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                if (out_learnt.size() == 1)/*auto*/{
+        out_btlevel = 0;
+}/*auto*/
                 core_added++;
             }else/*auto*/{
                 claBumpActivity(c);
@@ -528,7 +530,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -556,7 +558,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        int curr_restarts = 0;
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -710,7 +712,7 @@
     removeSatisfied(learnts);
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
+        
 }/*auto*/
     checkGarbage();
     rebuildOrderHeap();
@@ -819,7 +821,21 @@
                !luby_restart && LQ.size() == 50 && lS / 50. * K > gS / conflicts){// || !withinBudget()){
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
-                progress_estimate = progressEstimate();
+                if (conflicts % 5000 == 0){
+                //learntsize_adjust_confl *= learntsize_adjust_inc;
+                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                //max_learnts             *= learntsize_inc;
+
+                if (verbosity >= 1)/*auto*/{
+                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                           (int)conflicts, 
+                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                           starts, conflicts / starts,
+                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+}/*auto*/
+            }
                 cancelUntil(0);
                 return l_Undef; }
 
@@ -1000,7 +1016,11 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ for (int j = 1; j < c.size(); j++)/*auto*/{
+                    if (level(var(c[j])) > 0)/*auto*/{
+                        seen[var(c[j])] = 1;
+}/*auto*/
+}/*auto*/return;
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{

