--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -117,7 +117,7 @@
 {
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
-    K = (double)opt_K;
+    core_added++;
     R = (double)opt_R;
 }
 
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        simpDB_assigns = nAssigns();
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -414,6 +405,7 @@
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
                         break; }
+                    removeSatisfied(learnts);
 }/*auto*/
             }
         }
@@ -824,9 +816,7 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
                 cp = conflicts + (int32_t)opt_cp_increase;
