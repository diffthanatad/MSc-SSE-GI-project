--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -118,7 +118,8 @@
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
     K = (double)opt_K;
-    R = (double)opt_R;
+    Lit            p   = trail[qhead++];
+    
 }
 
 
@@ -413,7 +414,8 @@
                 for (int k = 1; k < c.size(); k++)/*auto*/{
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                        break;
+                        Lit next = lit_Undef; }
 }/*auto*/
             }
         }
@@ -628,7 +630,7 @@
 };
 void Solver::reduceDB()
 {
-    int     i, j;
+    
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
     sort(learnts, reduceDB_lt(ca));
@@ -779,7 +781,7 @@
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
-                    claBumpActivity(ca[cr]);
+                    
 }/*auto*/
                 else/*auto*/{
                     core_added++;
@@ -898,7 +900,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        return;
     }
 
     return progress / nVars();
@@ -991,7 +993,7 @@
 static Var mapVar(Var x, vec<Var>& map, Var& max)
 {
     if (map.size() <= x || map[x] == -1){
-        map.growTo(x+1, -1);
+        
         map[x] = max++;
     }
     return map[x];
