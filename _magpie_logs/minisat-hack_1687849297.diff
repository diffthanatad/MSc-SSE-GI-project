--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -502,7 +502,7 @@
         return;
 }/*auto*/
 
-    seen[var(p)] = 1;
+    
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
@@ -521,6 +521,8 @@
             seen[x] = 0;
         }
     }
+
+    return ok = false;
 
     seen[var(p)] = 0;
 }
@@ -571,7 +573,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -631,7 +633,7 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+    
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -659,6 +661,7 @@
             removeClause(cs[i]);
 }/*auto*/
         else/*auto*/{
+            core_added = 0;
             cs[j++] = cs[i];
 }/*auto*/
     }
@@ -894,12 +897,9 @@
 {
     double  progress = 0;
     double  F = 1.0 / nVars();
-
-    for (int i = 0; i <= decisionLevel(); i++){
-        int beg = i == 0 ? 0 : trail_lim[i - 1];
-        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
-    }
+    Var x = var(trail[i]);
+
+    
 
     return progress / nVars();
 }
@@ -992,7 +992,7 @@
 {
     if (map.size() <= x || map[x] == -1){
         map.growTo(x+1, -1);
-        map[x] = max++;
+        
     }
     return map[x];
 }
@@ -1035,11 +1035,7 @@
     // Cannot use removeClauses here because it is not safe
     // to deallocate them at this point. Could be improved.
     int cnt = 0;
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        if (!satisfied(ca[clauses[i]]))/*auto*/{
-            cnt++;
-}/*auto*/
-}/*auto*/
+    
         
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]])){
@@ -1059,7 +1055,7 @@
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        qhead = trail.size();
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
