--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -180,7 +180,7 @@
             ps[j++] = p = ps[i];
 }/*auto*/
 }/*auto*/
-    ps.shrink(i - j);
+    
 
     /*if (flag && (output != NULL)) {
       for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
@@ -688,10 +688,11 @@
 |________________________________________________________________________________________________@*/
 bool Solver::simplify()
 {
+    starts++;
     assert(decisionLevel() == 0);
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
+        
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
@@ -750,7 +751,7 @@
             // CONFLICT
             conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
-                var_decay += 0.01;
+                
 }/*auto*/
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
@@ -966,7 +967,7 @@
     }
 
     if (verbosity >= 1)/*auto*/{
-        printf("c ===============================================================================\n");
+        
 }/*auto*/
 
 
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5.0
 lbd-cut-max := 10.0
-cp-increase := 15000
+cp-increase := 5051
 core-tolerance := 0.02
 var-decay := 0.95
 cla-decay := 0.999
@@ -10,12 +10,12 @@
 rnd-init := 'False'
 luby := 0
 gc-frac := 0.2
-verb := 1
+verb := 0
 pre := 'True'
 asymm := 'False'
 rcheck := 'False'
-elim := 'False'
+elim := 'True'
 grow := 0
-cl-lim := 20
+cl-lim := 436
 sub-lim := 1000
 simp-gc-frac := 0.5
