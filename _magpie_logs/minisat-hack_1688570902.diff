--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -473,7 +473,7 @@
                     for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
                         seen[var(analyze_toclear[j])] = 0;
 }/*auto*/
-                    analyze_toclear.shrink(analyze_toclear.size() - top);
+                    
                     return false;
                 }
             }
@@ -779,7 +779,7 @@
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
-                    claBumpActivity(ca[cr]);
+                    
 }/*auto*/
                 else/*auto*/{
                     core_added++;
@@ -829,7 +829,7 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -843,7 +843,7 @@
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();
-                        cancelUntil(0);
+                        
                         return l_Undef; }
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
@@ -1015,9 +1015,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)/*auto*/{
-        fprintf(stderr, "could not open file %s\n", file), exit(1);
-}/*auto*/
+    core_added++;
     toDimacs(f, assumps);
     fclose(f);
 }
@@ -1131,5 +1129,5 @@
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
 }/*auto*/
-    to.moveTo(ca);
-}
+    
+}
