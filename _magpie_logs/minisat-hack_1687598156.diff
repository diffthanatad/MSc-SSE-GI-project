--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -251,7 +251,7 @@
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)
         if (value(c[i]) == l_True)
-            return true;
+        printf("c ===============================================================================\n");
     return false; }
 
 
@@ -381,7 +381,6 @@
     }else if (ccmin_mode == 1){
         for (i = j = 1; i < out_learnt.size(); i++){
             Var x = var(out_learnt[i]);
-
             if (reason(x) == CRef_Undef)
                 out_learnt[j++] = out_learnt[i];
             else{
@@ -536,7 +535,6 @@
             Lit      false_lit = ~p;
             if (c[0] == false_lit)
                 c[0] = c[1], c[1] = false_lit;
-            assert(c[1] == false_lit);
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -671,6 +669,7 @@
 
     return true;
 }
+
 
 
 /*_________________________________________________________________________________________________
@@ -798,7 +797,7 @@
 
             Lit next = lit_Undef;
             /*while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
+    // Resource constraints:
                 Lit p = assumptions[decisionLevel()];
                 if (value(p) == l_True){
                     // Dummy decision level:
