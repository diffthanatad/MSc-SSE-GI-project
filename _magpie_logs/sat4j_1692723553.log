2023-08-22 17:59:19,956	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/sat4j
target_files = 
	org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml
	sat4j.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 150
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 150
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_4.sh
run_timeout = 2259
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 100
elitism_size = 10
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-22 17:59:19,956	[INFO]	==== WARMUP ====
2023-08-22 18:26:06,983	[INFO]	WARM    SUCCESS               9211900301145           
2023-08-22 18:26:06,983	[INFO]	INITIAL SUCCESS               9211900301145           
2023-08-22 18:26:06,983	[INFO]	==== START: ValidTest ====
2023-08-22 18:26:07,067	[DEBUG]	CLEAN_PATCH: ParamSetting(('sat4j.params', 'VARDECAY'), 0.7446616574071555) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 449)) | ParamSetting(('sat4j.params', 'RESTARTS'), 'LubyRestarts') | ParamSetting(('sat4j.params', 'CLEANING'), 'LBD') | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 513)) | ParamSetting(('sat4j.params', 'LUBYFACTOR'), 31) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 632)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 631))
2023-08-22 18:26:07,067	[DEBUG]	CLEAN_SIZE: 8 (was 8)
2023-08-22 18:54:04,139	[DEBUG]	ParamSetting(('sat4j.params', 'VARDECAY'), 0.7446616574071555) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 449)) | ParamSetting(('sat4j.params', 'RESTARTS'), 'LubyRestarts') | ParamSetting(('sat4j.params', 'CLEANING'), 'LBD') | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 513)) | ParamSetting(('sat4j.params', 'LUBYFACTOR'), 31) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 632)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 631))
2023-08-22 18:54:04,139	[INFO]	1       SUCCESS              *9843745713930 (106.86%) [8 edit(s)] 
2023-08-22 18:54:04,150	[DEBUG]	--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -1253,10 +1253,7 @@
                         }
                     }
                 } else {
-                    if (this.restarter.shouldRestart()) {
-                        cancelUntil(this.rootLevel);
-                        return Lbool.UNDEFINED;
-                    }
+                    
                     if (this.needToReduceDB) {
                         reduceDB();
                         this.needToReduceDB = false;
@@ -1376,26 +1373,7 @@
         this.userbooleanmodel = new boolean[realNumberOfVariables()];
         this.fullmodel = null;
         Constr reason;
-        for (int i = 1; i <= nVars(); i++) {
-            if (this.voc.belongsToPool(i)) {
-                int p = this.voc.getFromPool(i);
-                if (!this.voc.isUnassigned(p)) {
-                    tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
-                    this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-                    reason = this.voc.getReason(p);
-                    if (reason == null && this.voc.getLevel(p) > 0
-                            // we consider literals propagated by learned
-                            // clauses
-                            // as decisions to allow blocking models by
-                            // decisions.
-                            || reason != null && reason.learnt()) {
-                        this.decisions.push(tempmodel.last());
-                    } else {
-                        this.implied.push(tempmodel.last());
-                    }
-                }
-            }
-        }
+        
         this.model = new int[tempmodel.size()];
         tempmodel.copyTo(this.model);
         if (realNumberOfVariables() > nVars()) {
@@ -1696,8 +1674,8 @@
         // solver data structures
         IVecInt localAssumps = new VecInt(assumps.size());
         for (IteratorInt iterator = assumps.iterator(); iterator.hasNext();) {
-            int assump = iterator.next();
-            localAssumps.push(this.voc.getFromPool(assump));
+            
+            
         }
         if (!alreadylaunched || !this.keepHot) {
             this.order.init();
--- before: sat4j.params
+++ after: sat4j.params
@@ -1,6 +1,7 @@
-RESTARTS := 'Glucose21Restarts'
+RESTARTS := 'LubyRestarts'
+LUBYFACTOR := 31
 PHASE := 'RSATPhaseSelectionStrategy'
 CLADECAY := 0.999
-VARDECAY := 0.95
+VARDECAY := 0.7446616574071555
 SIMP := 'EXPENSIVE_SIMPLIFICATION'
-CLEANING := 'LBD2'
+CLEANING := 'LBD'

2023-08-22 18:54:04,159	[INFO]	==== END ====
2023-08-22 18:54:04,159	[INFO]	Reason: validation end
2023-08-22 18:54:04,159	[INFO]	
2023-08-22 18:54:04,159	[INFO]	==== REPORT ====
2023-08-22 18:54:04,159	[INFO]	Termination: validation end
2023-08-22 18:54:04,160	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/sat4j_1692723553.log
2023-08-22 18:54:04,169	[INFO]	Patch file: _magpie_logs/sat4j_1692723553.patch
2023-08-22 18:54:04,169	[INFO]	Diff file: _magpie_logs/sat4j_1692723553.diff
2023-08-22 18:54:04,169	[INFO]	Best fitness: 9843745713930
2023-08-22 18:54:04,169	[INFO]	Best patch: ParamSetting(('sat4j.params', 'VARDECAY'), 0.7446616574071555) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 449)) | ParamSetting(('sat4j.params', 'RESTARTS'), 'LubyRestarts') | ParamSetting(('sat4j.params', 'CLEANING'), 'LBD') | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 513)) | ParamSetting(('sat4j.params', 'LUBYFACTOR'), 31) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 632)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 631))
2023-08-22 18:54:04,169	[INFO]	Diff:
--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -1253,10 +1253,7 @@
                         }
                     }
                 } else {
-                    if (this.restarter.shouldRestart()) {
-                        cancelUntil(this.rootLevel);
-                        return Lbool.UNDEFINED;
-                    }
+                    
                     if (this.needToReduceDB) {
                         reduceDB();
                         this.needToReduceDB = false;
@@ -1376,26 +1373,7 @@
         this.userbooleanmodel = new boolean[realNumberOfVariables()];
         this.fullmodel = null;
         Constr reason;
-        for (int i = 1; i <= nVars(); i++) {
-            if (this.voc.belongsToPool(i)) {
-                int p = this.voc.getFromPool(i);
-                if (!this.voc.isUnassigned(p)) {
-                    tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
-                    this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-                    reason = this.voc.getReason(p);
-                    if (reason == null && this.voc.getLevel(p) > 0
-                            // we consider literals propagated by learned
-                            // clauses
-                            // as decisions to allow blocking models by
-                            // decisions.
-                            || reason != null && reason.learnt()) {
-                        this.decisions.push(tempmodel.last());
-                    } else {
-                        this.implied.push(tempmodel.last());
-                    }
-                }
-            }
-        }
+        
         this.model = new int[tempmodel.size()];
         tempmodel.copyTo(this.model);
         if (realNumberOfVariables() > nVars()) {
@@ -1696,8 +1674,8 @@
         // solver data structures
         IVecInt localAssumps = new VecInt(assumps.size());
         for (IteratorInt iterator = assumps.iterator(); iterator.hasNext();) {
-            int assump = iterator.next();
-            localAssumps.push(this.voc.getFromPool(assump));
+            
+            
         }
         if (!alreadylaunched || !this.keepHot) {
             this.order.init();
--- before: sat4j.params
+++ after: sat4j.params
@@ -1,6 +1,7 @@
-RESTARTS := 'Glucose21Restarts'
+RESTARTS := 'LubyRestarts'
+LUBYFACTOR := 31
 PHASE := 'RSATPhaseSelectionStrategy'
 CLADECAY := 0.999
-VARDECAY := 0.95
+VARDECAY := 0.7446616574071555
 SIMP := 'EXPENSIVE_SIMPLIFICATION'
-CLEANING := 'LBD2'
+CLEANING := 'LBD'

