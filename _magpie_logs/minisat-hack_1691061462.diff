--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -556,7 +556,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -646,7 +646,7 @@
 }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    return l_Undef;
 }
 
 
@@ -656,7 +656,8 @@
     for (i = j = 0; i < cs.size(); i++){
         Clause& c = ca[cs[i]];
         if (satisfied(c))/*auto*/{
-            removeClause(cs[i]);
+            if (decisionLevel() == 0)/*auto*/{ return l_False;
+}/*auto*/
 }/*auto*/
         else/*auto*/{
             cs[j++] = cs[i];
@@ -824,9 +825,7 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            K = (double)opt_K;
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
                 cp = conflicts + (int32_t)opt_cp_increase;
