--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -138,7 +138,7 @@
 {
     int v = nVars();
     watches  .init(mkLit(v, false));
-    watches  .init(mkLit(v, true ));
+    
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
@@ -198,6 +198,7 @@
 }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
+        rebuildOrderHeap();
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -824,9 +825,7 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
                 cp = conflicts + (int32_t)opt_cp_increase;
@@ -843,11 +842,11 @@
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();
-                        cancelUntil(0);
+                        for (int j = 0; j < analyze_toclear.size(); j++)/*auto*/{ seen[var(analyze_toclear[j])] = 0;
+}/*auto*/
                         return l_Undef; }
                 }else{
-                    if (adjust > 0)/*auto*/{ adjust--;
-}/*auto*/
+                    
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
@@ -1045,9 +1044,7 @@
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
             for (int j = 0; j < c.size(); j++)/*auto*/{
-                if (value(c[j]) != l_False)/*auto*/{
-                    mapVar(var(c[j]), map, max);
-}/*auto*/
+                
 }/*auto*/
         }
 }/*auto*/
@@ -1067,7 +1064,7 @@
 }/*auto*/
 
     if (verbosity > 0)/*auto*/{
-        printf("Wrote %d clauses with %d variables.\n", cnt, max);
+        
 }/*auto*/
 }
 
