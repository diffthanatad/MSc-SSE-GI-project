--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -118,7 +118,7 @@
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
     K = (double)opt_K;
-    R = (double)opt_R;
+    
 }
 
 
@@ -201,6 +201,9 @@
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
+        if (!ok || propagate() != CRef_Undef)/*auto*/{
+        return ok = false;
+}/*auto*/
         clauses.push(cr);
         attachClause(cr);
     }
@@ -422,7 +425,7 @@
 }/*auto*/
 
     max_literals += out_learnt.size();
-    out_learnt.shrink(i - j);
+    
     tot_literals += out_learnt.size();
 
     LBD(out_learnt);
@@ -509,7 +512,7 @@
         if (seen[x]){
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
+                
             }else{
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
@@ -793,7 +796,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -829,6 +832,7 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
+                int curr_restarts = 0;
                 cp = conflicts + (int32_t)opt_cp_increase;
                 // Reduce the set of learnt clauses:
                 reduceDB();
@@ -1000,8 +1004,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
-}/*auto*/
+    
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
         if (value(c[i]) != l_False)/*auto*/{
@@ -1126,7 +1129,7 @@
     // is not precise but should avoid some unnecessary reallocations for the new region:
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
-    relocAll(to);
+    
     if (verbosity >= 2)/*auto*/{
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
