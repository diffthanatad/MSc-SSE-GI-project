2023-08-05 14:22:48,459	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_1.sh
run_timeout = 1582
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-05 14:22:48,460	[INFO]	==== WARMUP ====
2023-08-05 14:41:15,436	[INFO]	WARM    SUCCESS               1852568951787           
2023-08-05 14:41:15,436	[INFO]	INITIAL SUCCESS               1852568951787           
2023-08-05 14:41:15,437	[INFO]	==== START: ValidTest ====
2023-08-05 14:41:15,590	[DEBUG]	CLEAN_PATCH: StmtReplacement(('core/Solver.cc.xml', 'stmt', 90), ('core/Solver.cc.xml', 'stmt', 10)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 268), ('core/Solver.cc.xml', 'stmt', 312)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 154)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 403), ('core/Solver.cc.xml', 'stmt', 398)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 289)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 207))
2023-08-05 14:41:15,590	[DEBUG]	CLEAN_SIZE: 8 (was 9)
2023-08-05 15:02:52,053	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 90), ('core/Solver.cc.xml', 'stmt', 10)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 268), ('core/Solver.cc.xml', 'stmt', 312)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 154)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 403), ('core/Solver.cc.xml', 'stmt', 398)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 289)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 207))
2023-08-05 15:02:52,054	[INFO]	1       SUCCESS              *2136784731335 (115.34%) [8 edit(s)] 
2023-08-05 15:02:52,081	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -275,7 +275,7 @@
             Var      x  = var(trail[c]);
             assigns [x] = l_Undef;
             if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())/*auto*/{
-                polarity[x] = sign(trail[c]);
+                static DoubleOption  opt_clause_decay      (_cat, "cla-decay",   "The clause activity decay factor",              0.999,    DoubleRange(0, false, 1, false));
 }/*auto*/
             insertVarOrder(x); }
         qhead = trail_lim[level];
@@ -342,7 +342,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -411,9 +411,7 @@
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
                 for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
+                    
 }/*auto*/
             }
         }
@@ -514,7 +512,7 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
+                        
 }/*auto*/
 }/*auto*/
             }
@@ -646,7 +644,7 @@
 }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    return l_False;
 }
 
 
@@ -704,7 +702,7 @@
             V[j++] = V[i];
 }/*auto*/
 }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -797,21 +795,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -960,8 +944,7 @@
     while (status == l_Undef){
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : 0;//pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
-        if (!withinBudget())/*auto*/{ break;
-}/*auto*/
+        printf("c ===============================================================================\n");
         curr_restarts++;
     }
 

2023-08-05 15:02:52,097	[INFO]	==== END ====
2023-08-05 15:02:52,097	[INFO]	Reason: validation end
2023-08-05 15:02:52,098	[INFO]	
2023-08-05 15:02:52,098	[INFO]	==== REPORT ====
2023-08-05 15:02:52,098	[INFO]	Termination: validation end
2023-08-05 15:02:52,098	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691241765.log
2023-08-05 15:02:52,113	[INFO]	Patch file: _magpie_logs/minisat-hack_1691241765.patch
2023-08-05 15:02:52,113	[INFO]	Diff file: _magpie_logs/minisat-hack_1691241765.diff
2023-08-05 15:02:52,114	[INFO]	Best fitness: 2136784731335
2023-08-05 15:02:52,114	[INFO]	Best patch: StmtReplacement(('core/Solver.cc.xml', 'stmt', 90), ('core/Solver.cc.xml', 'stmt', 10)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 268), ('core/Solver.cc.xml', 'stmt', 312)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 154)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 403), ('core/Solver.cc.xml', 'stmt', 398)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 289)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 207))
2023-08-05 15:02:52,114	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -275,7 +275,7 @@
             Var      x  = var(trail[c]);
             assigns [x] = l_Undef;
             if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())/*auto*/{
-                polarity[x] = sign(trail[c]);
+                static DoubleOption  opt_clause_decay      (_cat, "cla-decay",   "The clause activity decay factor",              0.999,    DoubleRange(0, false, 1, false));
 }/*auto*/
             insertVarOrder(x); }
         qhead = trail_lim[level];
@@ -342,7 +342,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -411,9 +411,7 @@
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
                 for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
+                    
 }/*auto*/
             }
         }
@@ -514,7 +512,7 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
+                        
 }/*auto*/
 }/*auto*/
             }
@@ -646,7 +644,7 @@
 }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    return l_False;
 }
 
 
@@ -704,7 +702,7 @@
             V[j++] = V[i];
 }/*auto*/
 }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -797,21 +795,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -960,8 +944,7 @@
     while (status == l_Undef){
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : 0;//pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
-        if (!withinBudget())/*auto*/{ break;
-}/*auto*/
+        printf("c ===============================================================================\n");
         curr_restarts++;
     }
 

