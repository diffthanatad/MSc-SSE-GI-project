2023-08-22 21:07:16,602	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/sat4j
target_files = 
	org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml
	sat4j.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 150
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 150
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_4.sh
run_timeout = 2259
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 100
elitism_size = 10
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-22 21:07:16,603	[INFO]	==== WARMUP ====
2023-08-22 21:42:44,562	[INFO]	WARM    SUCCESS               9229882898901           
2023-08-22 21:42:45,098	[INFO]	INITIAL SUCCESS               9229882898901           
2023-08-22 21:42:45,098	[INFO]	==== START: ValidTest ====
2023-08-22 21:42:45,158	[DEBUG]	CLEAN_PATCH: StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 526)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 450)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 82)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 775), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 448)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 675))
2023-08-22 21:42:45,158	[DEBUG]	CLEAN_SIZE: 5 (was 5)
2023-08-22 22:13:35,409	[DEBUG]	StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 526)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 450)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 82)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 775), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 448)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 675))
2023-08-22 22:13:35,410	[INFO]	1       SUCCESS              *9794463447820 (106.12%) [5 edit(s)] 
2023-08-22 22:13:35,422	[DEBUG]	--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -364,7 +364,7 @@
         if (this.timeBasedTimeout) {
             if (this.timer != null) {
                 this.timer.cancel();
-                this.timer = null;
+                
             }
         } else {
             if (this.conflictCount != null) {
@@ -1194,6 +1194,7 @@
             if (!trailLim.isEmpty() && trailLim.last() == trail.size()) {
                 trailLim.pop();
                 decisions.pop();
+                continue;
             }
         }
     }
@@ -1254,7 +1255,7 @@
                     }
                 } else {
                     if (this.restarter.shouldRestart()) {
-                        cancelUntil(this.rootLevel);
+                        
                         return Lbool.UNDEFINED;
                     }
                     if (this.needToReduceDB) {
@@ -1399,20 +1400,7 @@
         this.model = new int[tempmodel.size()];
         tempmodel.copyTo(this.model);
         if (realNumberOfVariables() > nVars()) {
-            for (int i = nVars() + 1; i <= realNumberOfVariables(); i++) {
-                if (this.voc.belongsToPool(i)) {
-                    int p = this.voc.getFromPool(i);
-                    if (!this.voc.isUnassigned(p)) {
-                        tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
-                        this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-                        if (this.voc.getReason(p) == null) {
-                            this.decisions.push(tempmodel.last());
-                        } else {
-                            this.implied.push(tempmodel.last());
-                        }
-                    }
-                }
-            }
+            
             this.fullmodel = new int[tempmodel.size()];
             tempmodel.moveTo(this.fullmodel);
         } else {
@@ -1772,25 +1760,7 @@
         }
         boolean firstTimeGlobal = false;
         if (this.timeBasedTimeout) {
-            if (!global || this.timer == null) {
-                firstTimeGlobal = true;
-                this.undertimeout = true;
-                TimerTask stopMe = new TimerTask() {
-                    @Override
-                    public void run() {
-                        Solver.this.undertimeout = false;
-                        synchronized (Solver.this) {
-                            if (Solver.this.timer != null) {
-                                Solver.this.timer.cancel();
-                                Solver.this.timer = null;
-                            }
-                        }
-                    }
-                };
-                this.timer = new Timer(true);
-                this.timer.schedule(stopMe, this.timeout);
-
-            }
+            
         } else {
             if (!global || !alreadylaunched) {
                 firstTimeGlobal = true;

2023-08-22 22:13:35,433	[INFO]	==== END ====
2023-08-22 22:13:35,433	[INFO]	Reason: validation end
2023-08-22 22:13:35,433	[INFO]	
2023-08-22 22:13:35,433	[INFO]	==== REPORT ====
2023-08-22 22:13:35,433	[INFO]	Termination: validation end
2023-08-22 22:13:35,433	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/sat4j_1692734810.log
2023-08-22 22:13:35,445	[INFO]	Patch file: _magpie_logs/sat4j_1692734810.patch
2023-08-22 22:13:35,445	[INFO]	Diff file: _magpie_logs/sat4j_1692734810.diff
2023-08-22 22:13:35,446	[INFO]	Best fitness: 9794463447820
2023-08-22 22:13:35,446	[INFO]	Best patch: StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 526)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 450)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 82)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 775), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 448)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 675))
2023-08-22 22:13:35,446	[INFO]	Diff:
--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -364,7 +364,7 @@
         if (this.timeBasedTimeout) {
             if (this.timer != null) {
                 this.timer.cancel();
-                this.timer = null;
+                
             }
         } else {
             if (this.conflictCount != null) {
@@ -1194,6 +1194,7 @@
             if (!trailLim.isEmpty() && trailLim.last() == trail.size()) {
                 trailLim.pop();
                 decisions.pop();
+                continue;
             }
         }
     }
@@ -1254,7 +1255,7 @@
                     }
                 } else {
                     if (this.restarter.shouldRestart()) {
-                        cancelUntil(this.rootLevel);
+                        
                         return Lbool.UNDEFINED;
                     }
                     if (this.needToReduceDB) {
@@ -1399,20 +1400,7 @@
         this.model = new int[tempmodel.size()];
         tempmodel.copyTo(this.model);
         if (realNumberOfVariables() > nVars()) {
-            for (int i = nVars() + 1; i <= realNumberOfVariables(); i++) {
-                if (this.voc.belongsToPool(i)) {
-                    int p = this.voc.getFromPool(i);
-                    if (!this.voc.isUnassigned(p)) {
-                        tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
-                        this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-                        if (this.voc.getReason(p) == null) {
-                            this.decisions.push(tempmodel.last());
-                        } else {
-                            this.implied.push(tempmodel.last());
-                        }
-                    }
-                }
-            }
+            
             this.fullmodel = new int[tempmodel.size()];
             tempmodel.moveTo(this.fullmodel);
         } else {
@@ -1772,25 +1760,7 @@
         }
         boolean firstTimeGlobal = false;
         if (this.timeBasedTimeout) {
-            if (!global || this.timer == null) {
-                firstTimeGlobal = true;
-                this.undertimeout = true;
-                TimerTask stopMe = new TimerTask() {
-                    @Override
-                    public void run() {
-                        Solver.this.undertimeout = false;
-                        synchronized (Solver.this) {
-                            if (Solver.this.timer != null) {
-                                Solver.this.timer.cancel();
-                                Solver.this.timer = null;
-                            }
-                        }
-                    }
-                };
-                this.timer = new Timer(true);
-                this.timer.schedule(stopMe, this.timeout);
-
-            }
+            
         } else {
             if (!global || !alreadylaunched) {
                 firstTimeGlobal = true;

