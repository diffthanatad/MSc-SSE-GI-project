--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -174,7 +174,7 @@
 
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
         if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
+            
 }/*auto*/
         else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
             ps[j++] = p = ps[i];
@@ -511,6 +511,7 @@
                 assert(level(x) > 0);
                 out_conflict.push(~trail[i]);
             }else{
+                checkGarbage();
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
@@ -743,23 +744,20 @@
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
     starts++;
+    model.clear();
 
     for (;;){
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
             conflicts++; conflictC++;
-            if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
-                var_decay += 0.01;
-}/*auto*/
+            
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
 
             if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
+                static IntOption    opt_cp_increase        (_cat, "cp-increase", "cp-increase", 15000, IntRange(5000, 50000));
+                
             }
 
             learnt_clause.clear();
@@ -797,21 +795,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            static unsigned LBD_cut, core_added = 0;
 
         }else{
             // NO CONFLICT
@@ -850,12 +834,16 @@
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
-                    LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                    
                 }
                 core_added = 0;
             }
 
             Lit next = lit_Undef;
+
+            if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
             /*while (decisionLevel() < assumptions.size()){
                 // Perform user provided assumption:
                 Lit p = assumptions[decisionLevel()];
