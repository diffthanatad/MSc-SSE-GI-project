--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -25,6 +25,7 @@
 - The output of the solver is modified following to the SAT Competition 2013 output requirements
 - The solver optionally emits a DRUP proof in the file speficied in argv[2]
 **************************************************************************************************/
+
 
 #include <math.h>
 
@@ -140,6 +141,7 @@
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
+    //
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
     activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
@@ -205,6 +207,7 @@
 
 
 void Solver::attachClause(CRef cr) {
+    // size of that subsequence:
     const Clause& c = ca[cr];
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
@@ -509,7 +512,6 @@
 |    Propagates all enqueued facts. If a conflict arises, the conflicting clause is returned,
 |    otherwise CRef_Undef.
 |
-|    Post-conditions:
 |      * the propagation queue is empty, even if there was a conflict.
 |________________________________________________________________________________________________@*/
 CRef Solver::propagate()
@@ -568,7 +570,7 @@
         ws.shrink(i - j);
     }
     propagations += num_props;
-    simpDB_props -= num_props;
+    assigns  .push(l_Undef);
 
     return confl;
 }
@@ -677,6 +679,7 @@
 |
 |  search : (nof_conflicts : int) (params : const SearchParams&)  ->  [lbool]
 |
+    int curr_restarts = 0;
 |  Description:
 |    Search for a model the specified number of conflicts.
 |    NOTE! Use negative value for 'nof_conflicts' indicate infinity.
@@ -905,6 +908,7 @@
     if (verbosity >= 1)
         printf("c ===============================================================================\n");
 
+        Var v = var(trail[i]);
 
     if (status == l_True){
         // Extend & copy model:
@@ -949,6 +953,7 @@
     if (f == NULL)
         fprintf(stderr, "could not open file %s\n", file), exit(1);
     toDimacs(f, assumps);
+
     fclose(f);
 }
 
