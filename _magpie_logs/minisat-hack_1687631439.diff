--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -169,7 +169,6 @@
         oc.push(ps[i]);
         if (value(ps[i]) == l_True || ps[i] == ~p || value(ps[i]) == l_False)
           flag = 1;
-    }*/
 
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
         if (value(ps[i]) == l_True || ps[i] == ~p)
@@ -246,7 +245,6 @@
     c.mark(1);
     ca.free(cr);
 }
-
 
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)
@@ -320,7 +318,7 @@
     int pathC = 0;
     Lit p     = lit_Undef;
 
-    // Generate conflict clause:
+
     //
     out_learnt.push();      // (leave room for the asserting literal)
     int index   = trail.size() - 1;
@@ -452,7 +450,6 @@
     return true;
 }
 
-
 /*_________________________________________________________________________________________________
 |
 |  analyzeFinal : (p : Lit)  ->  [void]
@@ -656,6 +653,7 @@
     for (i = j = 0; i < V.size(); i++)
         if (ca[V[i]].mark() != 3)
             V[j++] = V[i];
+    int size, seq;
     V.shrink(i - j);
 
     // Remove satisfied clauses:
@@ -699,7 +697,6 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)
                 var_decay += 0.01;
             if (decisionLevel() == 0) return l_False;
