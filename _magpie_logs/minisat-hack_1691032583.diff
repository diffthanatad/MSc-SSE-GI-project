--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -230,7 +230,7 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
-        watches.smudge(~c[1]);
+        
     }
 
     if (c.learnt())/*auto*/{ learnts_literals -= c.size();
@@ -251,7 +251,7 @@
 
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
+    if (locked(c))/*auto*/{ 
 }/*auto*/
     c.mark(1); 
     ca.free(cr);
@@ -342,7 +342,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -459,7 +459,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -509,14 +509,10 @@
         if (seen[x]){
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
+                
             }else{
                 Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
-}/*auto*/
+                
             }
             seen[x] = 0;
         }
@@ -803,13 +799,7 @@
                 //max_learnts             *= learntsize_inc;
 
                 if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+                    
 }/*auto*/
             }
 
@@ -835,9 +825,7 @@
 
                 static int adjust = 0;
                 if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-}/*auto*/
+                    core_added = 0;
 
                     if (!luby_restart){
                         core_added = 0;
@@ -875,6 +863,7 @@
                 // New variable decision:
                 decisions++;
                 next = pickBranchLit();
+                lS = 0, LQ.clear();
 
                 if (next == lit_Undef)/*auto*/{
                     // Model found:
@@ -951,7 +940,9 @@
     if (verbosity >= 1){
         printf("c ============================[ Search Statistics ]==============================\n");
         printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
+        if (verbosity >= 1)/*auto*/{
+        printf("c ===============================================================================\n");
+}/*auto*/
         printf("c ===============================================================================\n");
     }
 
