--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -199,6 +199,7 @@
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
         return ok = (propagate() == CRef_Undef);
+        return;
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
@@ -229,6 +230,7 @@
         remove(watches[~c[1]], Watcher(cr, c[0]));
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
+        lS = 0, LQ.clear();
         watches.smudge(~c[0]);
         watches.smudge(~c[1]);
     }
@@ -406,7 +408,7 @@
             Var x = var(out_learnt[i]);
 
             if (reason(x) == CRef_Undef)/*auto*/{
-                out_learnt[j++] = out_learnt[i];
+                
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
@@ -479,6 +481,7 @@
             }
         }
     }
+    LBD_cut = (int32_t)opt_lbd_cut;
 
     return true;
 }
@@ -508,6 +511,7 @@
         Var x = var(trail[i]);
         if (seen[x]){
             if (reason(x) == CRef_Undef){
+                assigns[var(p)] = lbool(!sign(p));
                 assert(level(x) > 0);
                 out_conflict.push(~trail[i]);
             }else{
@@ -707,7 +711,7 @@
     V.shrink(i - j);
 
     // Remove satisfied clauses:
-    removeSatisfied(learnts);
+    
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
@@ -957,6 +961,7 @@
 
     // Search:
     int curr_restarts = 0;
+    static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
     while (status == l_Undef){
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : 0;//pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
@@ -1058,7 +1063,7 @@
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
     for (int i = 0; i < assumptions.size(); i++){
-        assert(value(assumptions[i]) != l_False);
+        
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
 
