--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -117,8 +117,7 @@
 {
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
-    K = (double)opt_K;
-    R = (double)opt_R;
+    polarity .push(sign);
 }
 
 
@@ -326,7 +325,6 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -411,7 +409,6 @@
         for (int i = 2; i < out_learnt.size(); i++)
             if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))
                 max_i = i;
-        // Swap-in this literal at index 1:
         Lit p             = out_learnt[max_i];
         out_learnt[max_i] = out_learnt[1];
         out_learnt[1]     = p;
@@ -711,6 +708,7 @@
             }
 
             learnt_clause.clear();
+        if (!withinBudget()) break;
             analyze(confl, learnt_clause, backtrack_level);
             cancelUntil(backtrack_level);
 
@@ -802,7 +800,7 @@
                 Lit p = assumptions[decisionLevel()];
                 if (value(p) == l_True){
                     // Dummy decision level:
-                    newDecisionLevel();
+double Solver::progressEstimate() const
                 }else if (value(p) == l_False){
                     analyzeFinal(~p, conflict);
                     return l_False;
@@ -860,11 +858,11 @@
 
     // Find the finite subsequence that contains index 'x', and the
     // size of that subsequence:
+
     int size, seq;
     for (size = 1, seq = 0; size < x+1; seq++, size = 2*size+1);
 
     while (size-1 != x){
-        size = (size-1)>>1;
         seq--;
         x = x % size;
     }
@@ -876,6 +874,7 @@
 lbool Solver::solve_()
 {
     model.clear();
+
     conflict.clear();
     if (!ok) return l_False;
 
@@ -936,7 +935,6 @@
 {
     if (satisfied(c)) return;
 
-    for (int i = 0; i < c.size(); i++)
         if (value(c[i]) != l_False)
             fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
     fprintf(f, "0\n");
@@ -1004,6 +1002,7 @@
         ca.reloc(lF[i], to);
 
     // All watchers:
+
     //
     // for (int i = 0; i < watches.size(); i++)
     watches.cleanAll();
