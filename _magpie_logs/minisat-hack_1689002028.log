2023-07-10 16:13:59,132	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 15
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_1.sh
run_timeout = 1294
run_lengthout = 
fitness = perf_time

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 3
warmup_strategy = last
max_steps = 
max_time = 21840
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5


2023-07-10 16:13:59,132	[INFO]	==== WARMUP ====
2023-07-10 16:32:00,343	[INFO]	WARM    SUCCESS               1066.9955               
2023-07-10 16:49:37,493	[INFO]	WARM    SUCCESS               1052.9016               
2023-07-10 17:07:15,250	[INFO]	WARM    SUCCESS               1054.0425               
2023-07-10 17:07:15,250	[INFO]	INITIAL SUCCESS               1054.0425               
2023-07-10 17:07:15,250	[INFO]	==== START: ValidRankingSimplify ====
2023-07-10 17:07:15,568	[DEBUG]	CLEAN_PATCH: StmtReplacement(('core/Solver.cc.xml', 'stmt', 357), ('core/Solver.cc.xml', 'stmt', 457)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 385), ('core/Solver.cc.xml', 'stmt', 41)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 96), ('core/Solver.cc.xml', 'stmt', 365)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 562), ('core/Solver.cc.xml', 'stmt', 296)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 421)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 378), ('core/Solver.cc.xml', 'stmt', 342)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 552), ('core/Solver.cc.xml', 'stmt', 209)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 22), ('core/Solver.cc.xml', 'stmt', 302)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 573), ('core/Solver.cc.xml', 'stmt', 465)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 218), ('core/Solver.cc.xml', 'stmt', 108))
2023-07-10 17:07:15,568	[DEBUG]	CLEAN_SIZE: 11 (was 11)
2023-07-10 17:25:35,258	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 357), ('core/Solver.cc.xml', 'stmt', 457)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 385), ('core/Solver.cc.xml', 'stmt', 41)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 96), ('core/Solver.cc.xml', 'stmt', 365)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 562), ('core/Solver.cc.xml', 'stmt', 296)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 421)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 378), ('core/Solver.cc.xml', 'stmt', 342)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 552), ('core/Solver.cc.xml', 'stmt', 209)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 22), ('core/Solver.cc.xml', 'stmt', 302)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 573), ('core/Solver.cc.xml', 'stmt', 465)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 218), ('core/Solver.cc.xml', 'stmt', 108))
2023-07-10 17:25:35,259	[INFO]	1       SUCCESS              *1095.3555 (103.92%) [11 edit(s)] 
2023-07-10 17:25:35,287	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -117,7 +117,7 @@
 {
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
-    K = (double)opt_K;
+    vec<Lit>    learnt_clause;
     R = (double)opt_R;
 }
 
@@ -278,6 +278,7 @@
                 polarity[x] = sign(trail[c]);
 }/*auto*/
             insertVarOrder(x); }
+        decisions++;
         qhead = trail_lim[level];
         trail.shrink(trail.size() - trail_lim[level]);
         trail_lim.shrink(trail_lim.size() - level);
@@ -436,6 +437,7 @@
         int max_i = 1;
         // Find the first literal assigned at the next-highest level:
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
+            Lit p     = lit_Undef;
             if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))/*auto*/{
                 max_i = i;
 }/*auto*/
@@ -671,6 +673,7 @@
     vec<Var> vs;
     for (Var v = 0; v < nVars(); v++)/*auto*/{
         if (decision[v] && value(v) == l_Undef)/*auto*/{
+            return l_Undef;
             vs.push(v);
 }/*auto*/
 }/*auto*/
@@ -844,7 +847,7 @@
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
-                        return l_Undef; }
+                        watches.cleanAll(); }
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
@@ -936,9 +939,9 @@
 // NOTE: assumptions passed in member-variable 'assumptions'.
 lbool Solver::solve_()
 {
-    model.clear();
+    Lit p;
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;
@@ -960,6 +963,7 @@
     while (status == l_Undef){
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : 0;//pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
+        seen[var(p)] = 0;
         if (!withinBudget())/*auto*/{ break;
 }/*auto*/
         curr_restarts++;
@@ -973,7 +977,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
+        for (int i = 0; i < nVars(); i++)/*auto*/{ simpDB_assigns = nAssigns();model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;
@@ -1000,8 +1004,9 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
-}/*auto*/
+    if (satisfied(c))/*auto*/{ 
+}/*auto*/
+    Var v = var(trail[i]);
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
         if (value(c[i]) != l_False)/*auto*/{

2023-07-10 17:25:35,287	[INFO]	-- ranking --
2023-07-10 17:43:18,117	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 357), ('core/Solver.cc.xml', 'stmt', 457))
2023-07-10 17:43:18,118	[INFO]	2       SUCCESS              *1059.0838 (100.48%) [1 edit(s)] 
2023-07-10 17:43:18,138	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -844,7 +844,7 @@
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
-                        return l_Undef; }
+                        watches.cleanAll(); }
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/

2023-07-10 18:00:49,714	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 385), ('core/Solver.cc.xml', 'stmt', 41))
2023-07-10 18:00:49,715	[INFO]	3       SUCCESS              *1047.9722 (99.42%) [1 edit(s)] 
2023-07-10 18:00:49,734	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -936,7 +936,7 @@
 // NOTE: assumptions passed in member-variable 'assumptions'.
 lbool Solver::solve_()
 {
-    model.clear();
+    Lit p;
     conflict.clear();
     if (!ok)/*auto*/{ return l_False;
 }/*auto*/

2023-07-10 18:18:36,379	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 96), ('core/Solver.cc.xml', 'stmt', 365))
2023-07-10 18:18:36,379	[INFO]	4       SUCCESS              +1062.6723 (100.82%) [1 edit(s)] 
2023-07-10 18:18:36,401	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -278,6 +278,7 @@
                 polarity[x] = sign(trail[c]);
 }/*auto*/
             insertVarOrder(x); }
+        decisions++;
         qhead = trail_lim[level];
         trail.shrink(trail.size() - trail_lim[level]);
         trail_lim.shrink(trail_lim.size() - level);

2023-07-10 18:36:14,625	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 562), ('core/Solver.cc.xml', 'stmt', 296))
2023-07-10 18:36:14,626	[INFO]	5       SUCCESS              +1054.5514 (100.05%) [1 edit(s)] 
2023-07-10 18:36:14,638	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -973,7 +973,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
+        for (int i = 0; i < nVars(); i++)/*auto*/{ simpDB_assigns = nAssigns();model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;

2023-07-10 18:53:56,240	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 421))
2023-07-10 18:53:56,241	[INFO]	6       SUCCESS              +1058.0102 (100.38%) [1 edit(s)] 
2023-07-10 18:53:56,250	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -1000,7 +1000,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ 
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{

2023-07-10 19:13:05,273	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 378), ('core/Solver.cc.xml', 'stmt', 342))
2023-07-10 19:13:05,273	[INFO]	7       SUCCESS              +1145.312 (108.66%) [1 edit(s)] 
2023-07-10 19:13:05,286	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -671,6 +671,7 @@
     vec<Var> vs;
     for (Var v = 0; v < nVars(); v++)/*auto*/{
         if (decision[v] && value(v) == l_Undef)/*auto*/{
+            return l_Undef;
             vs.push(v);
 }/*auto*/
 }/*auto*/

2023-07-10 19:13:05,726	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 552), ('core/Solver.cc.xml', 'stmt', 209))
2023-07-10 19:13:05,726	[INFO]	8       COMPILE_CODE_ERROR    None  [1 edit(s)]       
2023-07-10 19:32:45,701	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 22), ('core/Solver.cc.xml', 'stmt', 302))
2023-07-10 19:32:45,702	[INFO]	9       SUCCESS              +1175.4003 (111.51%) [1 edit(s)] 
2023-07-10 19:32:45,712	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -117,7 +117,7 @@
 {
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
-    K = (double)opt_K;
+    vec<Lit>    learnt_clause;
     R = (double)opt_R;
 }
 

2023-07-10 19:50:27,564	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 573), ('core/Solver.cc.xml', 'stmt', 465))
2023-07-10 19:50:27,564	[INFO]	10      SUCCESS              +1058.4564 (100.42%) [1 edit(s)] 
2023-07-10 19:50:27,575	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -1002,6 +1002,7 @@
 {
     if (satisfied(c))/*auto*/{ return;
 }/*auto*/
+    Var v = var(trail[i]);
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
         if (value(c[i]) != l_False)/*auto*/{

2023-07-10 20:07:57,423	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398))
2023-07-10 20:07:57,423	[INFO]	11      SUCCESS              *1045.8716 (99.22%) [1 edit(s)] 
2023-07-10 20:07:57,442	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 20:25:50,575	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 218), ('core/Solver.cc.xml', 'stmt', 108))
2023-07-10 20:25:50,576	[INFO]	12      SUCCESS              +1069.352 (101.45%) [1 edit(s)] 
2023-07-10 20:25:50,587	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -436,6 +436,7 @@
         int max_i = 1;
         // Find the first literal assigned at the next-highest level:
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
+            Lit p     = lit_Undef;
             if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))/*auto*/{
                 max_i = i;
 }/*auto*/

2023-07-10 20:25:50,587	[INFO]	-- rebuild --
2023-07-10 20:43:25,622	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 385), ('core/Solver.cc.xml', 'stmt', 41))
2023-07-10 20:43:25,623	[INFO]	13      SUCCESS              +1051.4142 (99.75%) [2 edit(s)] 
2023-07-10 20:43:25,634	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -936,9 +936,9 @@
 // NOTE: assumptions passed in member-variable 'assumptions'.
 lbool Solver::solve_()
 {
-    model.clear();
+    Lit p;
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 21:01:02,097	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 562), ('core/Solver.cc.xml', 'stmt', 296))
2023-07-10 21:01:02,097	[INFO]	14      SUCCESS              +1052.7938 (99.88%) [2 edit(s)] 
2023-07-10 21:01:02,121	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;
@@ -973,7 +973,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
+        for (int i = 0; i < nVars(); i++)/*auto*/{ simpDB_assigns = nAssigns();model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;

2023-07-10 21:18:57,231	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 421))
2023-07-10 21:18:57,231	[INFO]	15      SUCCESS              +1071.3369 (101.64%) [2 edit(s)] 
2023-07-10 21:18:57,242	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;
@@ -1000,7 +1000,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ 
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{

2023-07-10 21:36:37,422	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 573), ('core/Solver.cc.xml', 'stmt', 465))
2023-07-10 21:36:37,423	[INFO]	16      SUCCESS              +1056.651 (100.25%) [2 edit(s)] 
2023-07-10 21:36:37,436	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;
@@ -1002,6 +1002,7 @@
 {
     if (satisfied(c))/*auto*/{ return;
 }/*auto*/
+    Var v = var(trail[i]);
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
         if (value(c[i]) != l_False)/*auto*/{

2023-07-10 21:54:18,781	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 357), ('core/Solver.cc.xml', 'stmt', 457))
2023-07-10 21:54:18,781	[INFO]	17      SUCCESS              +1057.6279 (100.34%) [2 edit(s)] 
2023-07-10 21:54:18,794	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -844,7 +844,7 @@
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
-                        return l_Undef; }
+                        watches.cleanAll(); }
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 22:12:03,061	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 96), ('core/Solver.cc.xml', 'stmt', 365))
2023-07-10 22:12:03,061	[INFO]	18      SUCCESS              +1060.2744 (100.59%) [2 edit(s)] 
2023-07-10 22:12:03,074	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -278,6 +278,7 @@
                 polarity[x] = sign(trail[c]);
 }/*auto*/
             insertVarOrder(x); }
+        decisions++;
         qhead = trail_lim[level];
         trail.shrink(trail.size() - trail_lim[level]);
         trail_lim.shrink(trail_lim.size() - level);
@@ -938,7 +939,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 22:29:40,527	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 218), ('core/Solver.cc.xml', 'stmt', 108))
2023-07-10 22:29:40,528	[INFO]	19      SUCCESS              +1053.8124 (99.98%) [2 edit(s)] 
2023-07-10 22:29:40,552	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -436,6 +436,7 @@
         int max_i = 1;
         // Find the first literal assigned at the next-highest level:
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
+            Lit p     = lit_Undef;
             if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))/*auto*/{
                 max_i = i;
 }/*auto*/
@@ -938,7 +939,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 22:48:56,991	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 378), ('core/Solver.cc.xml', 'stmt', 342))
2023-07-10 22:48:56,992	[INFO]	20      SUCCESS              +1152.9719 (109.39%) [2 edit(s)] 
2023-07-10 22:48:57,004	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -671,6 +671,7 @@
     vec<Var> vs;
     for (Var v = 0; v < nVars(); v++)/*auto*/{
         if (decision[v] && value(v) == l_Undef)/*auto*/{
+            return l_Undef;
             vs.push(v);
 }/*auto*/
 }/*auto*/
@@ -938,7 +939,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 23:08:54,796	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 22), ('core/Solver.cc.xml', 'stmt', 302))
2023-07-10 23:08:54,796	[INFO]	21      SUCCESS              +1194.1139 (113.29%) [2 edit(s)] 
2023-07-10 23:08:54,808	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -117,7 +117,7 @@
 {
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
-    K = (double)opt_K;
+    vec<Lit>    learnt_clause;
     R = (double)opt_R;
 }
 
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

2023-07-10 23:08:55,238	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 552), ('core/Solver.cc.xml', 'stmt', 209))
2023-07-10 23:08:55,238	[INFO]	22      COMPILE_CODE_ERROR    None  [2 edit(s)]       
2023-07-10 23:08:55,238	[INFO]	-- simplify --
2023-07-10 23:08:55,247	[DEBUG]	
2023-07-10 23:08:55,247	[INFO]	23      SUCCESS              +1054.0425 (100.0%) [0 edit(s)] 
2023-07-10 23:08:55,256	[DEBUG]	
2023-07-10 23:08:55,266	[INFO]	==== END ====
2023-07-10 23:08:55,267	[INFO]	Reason: validation end
2023-07-10 23:08:55,267	[INFO]	
2023-07-10 23:08:55,267	[INFO]	==== REPORT ====
2023-07-10 23:08:55,267	[INFO]	Termination: validation end
2023-07-10 23:08:55,267	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1689002028.log
2023-07-10 23:08:55,278	[INFO]	Patch file: _magpie_logs/minisat-hack_1689002028.patch
2023-07-10 23:08:55,279	[INFO]	Diff file: _magpie_logs/minisat-hack_1689002028.diff
2023-07-10 23:08:55,279	[INFO]	Best fitness: 1045.8716
2023-07-10 23:08:55,279	[INFO]	Best patch: StmtReplacement(('core/Solver.cc.xml', 'stmt', 388), ('core/Solver.cc.xml', 'stmt', 398))
2023-07-10 23:08:55,279	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -938,7 +938,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
+    if (!ok)/*auto*/{ printf("c ===============================================================================\n");
 }/*auto*/
 
     solves++;

