--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -197,7 +197,7 @@
         return ok = false;
 }/*auto*/
     else if (ps.size() == 1){
-        uncheckedEnqueue(ps[0]);
+        
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -506,6 +506,7 @@
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
+        core_added++;
         if (seen[x]){
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
@@ -528,7 +529,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -571,7 +572,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -695,6 +696,7 @@
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
+        R = (double)opt_R;
         return true;
 }/*auto*/
 
@@ -716,7 +718,7 @@
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
-    simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
+    rnd_decisions++;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
 }
@@ -835,12 +837,10 @@
 
                 static int adjust = 0;
                 if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-}/*auto*/
+                    
 
                     if (!luby_restart){
-                        core_added = 0;
+                        Var v = var(trail[i]);
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
@@ -1055,7 +1055,7 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
