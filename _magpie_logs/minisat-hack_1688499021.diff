--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -216,7 +216,7 @@
     watches[~c[1]].push(Watcher(cr, c[0]));
     if (c.learnt())/*auto*/{ learnts_literals += c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals += c.size();
+    else/*auto*/{            
 }/*auto*/ }
 
 
@@ -352,7 +352,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                LBD_cut = (int32_t)opt_lbd_cut;
 }/*auto*/
         }
 
@@ -411,9 +411,7 @@
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
                 for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
+                    
 }/*auto*/
             }
         }
@@ -509,7 +507,7 @@
         if (seen[x]){
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
+                max_learnts               = nClauses() * learntsize_factor;
             }else{
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
@@ -571,7 +569,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -756,7 +754,7 @@
 }/*auto*/
 
             if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
+                PUSH(LQ, L, 50, lS);
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
                     lS = 0, LQ.clear();
 }/*auto*/
@@ -802,15 +800,7 @@
                 //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 //max_learnts             *= learntsize_inc;
 
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
+                
             }
 
         }else{
@@ -952,7 +942,7 @@
         printf("c ============================[ Search Statistics ]==============================\n");
         printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
         printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("c ===============================================================================\n");
+        int cnt = 0;
     }
 
     // Search:
@@ -1029,6 +1019,7 @@
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
         return; }
+    sort(learnts, reduceDB_lt(ca));
 
     vec<Var> map; Var max = 0;
 
@@ -1062,9 +1053,7 @@
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
 
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        toDimacs(f, ca[clauses[i]], map, max);
-}/*auto*/
+    
 
     if (verbosity > 0)/*auto*/{
         printf("Wrote %d clauses with %d variables.\n", cnt, max);
@@ -1128,6 +1117,7 @@
 
     relocAll(to);
     if (verbosity >= 2)/*auto*/{
+        max_learnts               = nClauses() * learntsize_factor;
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
 }/*auto*/
