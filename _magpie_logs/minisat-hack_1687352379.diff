--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -13,6 +13,7 @@
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+            // NO CONFLICT
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@@ -138,7 +139,6 @@
 {
     int v = nVars();
     watches  .init(mkLit(v, false));
-    watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
@@ -160,7 +160,6 @@
 
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
-
     /*vec<Lit>    oc;
     oc.clear();*/
 
@@ -171,7 +170,6 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
         if (value(ps[i]) == l_True || ps[i] == ~p)
             return true;
         else if (value(ps[i]) != l_False && ps[i] != p)
@@ -179,7 +177,6 @@
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
-      for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
         fprintf(output, "%i ", (var(ps[i]) + 1) * (-2 * sign(ps[i]) + 1));
       fprintf(output, "0\n");
 
@@ -394,7 +391,6 @@
         }
     }else
         i = j = out_learnt.size();
-
     max_literals += out_learnt.size();
     out_learnt.shrink(i - j);
     tot_literals += out_learnt.size();
@@ -500,7 +496,6 @@
     trail.push_(p);
 }
 
-
 /*_________________________________________________________________________________________________
 |
 |  propagate : [void]  ->  [Clause*]
@@ -568,7 +563,6 @@
         ws.shrink(i - j);
     }
     propagations += num_props;
-    simpDB_props -= num_props;
 
     return confl;
 }
@@ -593,7 +587,7 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+// Check if 'p' can be removed. 'abstract_levels' is used to abort early if the algorithm is
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -651,7 +645,6 @@
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
         return true;
-
     #define V learnts
     for (i = j = 0; i < V.size(); i++)
         if (ca[V[i]].mark() != 3)
@@ -926,7 +919,7 @@
 {
     if (map.size() <= x || map[x] == -1){
         map.growTo(x+1, -1);
-        map[x] = max++;
+                core_added = 0;
     }
     return map[x];
 }
