--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -350,7 +350,7 @@
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
-                core_added++;
+                varDecayActivity();
             }else/*auto*/{
                 claBumpActivity(c);
 }/*auto*/
@@ -366,7 +366,7 @@
                     pathC++;
                     CRef r = reason(var(q));
                     if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
+                        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
 }/*auto*/
                 }else/*auto*/{
                     out_learnt.push(q);
@@ -474,6 +474,8 @@
                         seen[var(analyze_toclear[j])] = 0;
 }/*auto*/
                     analyze_toclear.shrink(analyze_toclear.size() - top);
+                    if (!ok)/*auto*/{ return false;
+}/*auto*/
                     return false;
                 }
             }
@@ -495,7 +497,7 @@
 |________________________________________________________________________________________________@*/
 void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 {
-    out_conflict.clear();
+    
     out_conflict.push(p);
 
     if (decisionLevel() == 0)/*auto*/{
@@ -522,7 +524,7 @@
         }
     }
 
-    seen[var(p)] = 0;
+    
 }
 
 
@@ -642,11 +644,12 @@
 }/*auto*/
             else{
                 c.mark(0);
-                learnts[j++] = learnts[i]; }
+                learnts[j++] = learnts[i];
+                assert(decisionLevel() == 0); }
 }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    
 }
 
 
@@ -695,7 +698,7 @@
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
+        
 }/*auto*/
 
     #define V learnts
@@ -748,7 +751,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+             conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 var_decay += 0.01;
 }/*auto*/
@@ -779,7 +782,7 @@
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
-                    claBumpActivity(ca[cr]);
+                    
 }/*auto*/
                 else/*auto*/{
                     core_added++;
@@ -803,13 +806,7 @@
                 //max_learnts             *= learntsize_inc;
 
                 if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+                    int         backtrack_level;
 }/*auto*/
             }
 
@@ -846,6 +843,7 @@
                         cancelUntil(0);
                         return l_Undef; }
                 }else{
+                    Var v = var(trail[i]);
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
@@ -938,8 +936,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok)/*auto*/{ return l_False;
-}/*auto*/
+    
 
     solves++;
 
@@ -1035,6 +1032,7 @@
     // Cannot use removeClauses here because it is not safe
     // to deallocate them at this point. Could be improved.
     int cnt = 0;
+    removeSatisfied(clauses);
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]]))/*auto*/{
             cnt++;
@@ -1053,7 +1051,7 @@
 }/*auto*/
 
     // Assumptions are added as unit clauses:
-    cnt += assumptions.size();
+    
 
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
