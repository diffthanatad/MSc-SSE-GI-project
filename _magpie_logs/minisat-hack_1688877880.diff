--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -155,7 +155,7 @@
 
 bool Solver::addClause_(vec<Lit>& ps)
 {
-    assert(decisionLevel() == 0);
+    
     if (!ok)/*auto*/{ return false;
 }/*auto*/
 
@@ -352,7 +352,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                
 }/*auto*/
         }
 
@@ -438,6 +438,7 @@
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
             if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))/*auto*/{
                 max_i = i;
+                Lit p;
 }/*auto*/
 }/*auto*/
         // Swap-in this literal at index 1:
@@ -656,7 +657,7 @@
     for (i = j = 0; i < cs.size(); i++){
         Clause& c = ca[cs[i]];
         if (satisfied(c))/*auto*/{
-            removeClause(cs[i]);
+            
 }/*auto*/
         else/*auto*/{
             cs[j++] = cs[i];
@@ -699,11 +700,7 @@
 }/*auto*/
 
     #define V learnts
-    for (i = j = 0; i < V.size(); i++)/*auto*/{
-        if (ca[V[i]].mark() != 3)/*auto*/{
-            V[j++] = V[i];
-}/*auto*/
-}/*auto*/
+    
     V.shrink(i - j);
 
     // Remove satisfied clauses:
