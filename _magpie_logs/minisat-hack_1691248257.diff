--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -459,7 +450,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -522,7 +513,7 @@
         }
     }
 
-    seen[var(p)] = 0;
+    
 }
 
 
@@ -556,7 +547,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -624,7 +615,7 @@
     ClauseAllocator& ca;
     reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
     bool operator () (CRef x, CRef y) { 
-        return /*ca[x].size() > 2 && (ca[y].size() == 2 ||*/ ca[x].activity() < ca[y].activity(); } 
+         } 
 };
 void Solver::reduceDB()
 {
@@ -755,12 +746,7 @@
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
 
-            if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
-            }
+            
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
@@ -793,7 +779,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            polarity .push(sign);
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -848,7 +834,7 @@
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
-                    if (adjust == 0)/*auto*/{ K = (double)opt_K;
+                    if (adjust == 0)/*auto*/{ int beg = i == 0 ? 0 : trail_lim[i - 1];
 }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
                 }
