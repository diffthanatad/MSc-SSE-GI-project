2023-07-11 02:39:45,170	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 15
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_8.sh
run_timeout = 1263
run_lengthout = 
fitness = perf_time

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 3
warmup_strategy = last
max_steps = 
max_time = 21840
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5


2023-07-11 02:39:45,171	[INFO]	==== WARMUP ====
2023-07-11 02:57:10,995	[INFO]	WARM    SUCCESS               1036.1048               
2023-07-11 03:14:25,276	[INFO]	WARM    SUCCESS               1030.8126               
2023-07-11 03:31:28,388	[INFO]	WARM    SUCCESS               1019.6473               
2023-07-11 03:31:28,389	[INFO]	INITIAL SUCCESS               1019.6473               
2023-07-11 03:31:28,389	[INFO]	==== START: ValidRankingSimplify ====
2023-07-11 03:31:28,617	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 256), ('core/Solver.cc.xml', 'stmt', 50)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 280)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 617), ('core/Solver.cc.xml', 'stmt', 431)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 63)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 115), ('core/Solver.cc.xml', 'stmt', 302)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 346)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 447)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 6), ('core/Solver.cc.xml', 'stmt', 31)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 343), ('core/Solver.cc.xml', 'stmt', 14))
2023-07-11 03:31:28,617	[DEBUG]	CLEAN_SIZE: 10 (was 10)
2023-07-11 03:50:47,304	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 256), ('core/Solver.cc.xml', 'stmt', 50)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 280)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 617), ('core/Solver.cc.xml', 'stmt', 431)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 63)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 115), ('core/Solver.cc.xml', 'stmt', 302)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 346)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 447)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 6), ('core/Solver.cc.xml', 'stmt', 31)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 343), ('core/Solver.cc.xml', 'stmt', 14))
2023-07-11 03:50:47,305	[INFO]	1       SUCCESS              *1155.1559 (113.29%) [10 edit(s)] 
2023-07-11 03:50:47,328	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -136,6 +136,7 @@
 //
 Var Solver::newVar(bool sign, bool dvar)
 {
+    m        .push(0);
     int v = nVars();
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
@@ -214,7 +215,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
-    if (c.learnt())/*auto*/{ learnts_literals += c.size();
+    if (c.learnt())/*auto*/{ 
 }/*auto*/
     else/*auto*/{            clauses_literals += c.size();
 }/*auto*/ }
@@ -296,6 +297,7 @@
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
+            vec<Lit>    learnt_clause;
             rnd_decisions++;
 }/*auto*/ }
 
@@ -522,6 +524,8 @@
         }
     }
 
+    return ok = false;
+
     seen[var(p)] = 0;
 }
 
@@ -674,7 +678,7 @@
             vs.push(v);
 }/*auto*/
 }/*auto*/
-    order_heap.build(vs);
+    
 }
 
 
@@ -708,7 +712,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -824,12 +828,10 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -1055,9 +1057,12 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
+        if (!ok){
+        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        return; }
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }

2023-07-11 03:50:47,329	[INFO]	-- ranking --
2023-07-11 04:07:28,504	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291))
2023-07-11 04:07:28,505	[INFO]	2       SUCCESS              *997.4052 (97.82%) [1 edit(s)] 
2023-07-11 04:07:28,515	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-11 04:24:48,520	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 256), ('core/Solver.cc.xml', 'stmt', 50))
2023-07-11 04:24:48,520	[INFO]	3       SUCCESS              +1036.4652 (101.65%) [1 edit(s)] 
2023-07-11 04:24:48,532	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -522,6 +522,8 @@
         }
     }
 
+    return ok = false;
+
     seen[var(p)] = 0;
 }
 

2023-07-11 04:43:13,603	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 280))
2023-07-11 04:43:13,604	[INFO]	4       SUCCESS              +1101.3514 (108.01%) [1 edit(s)] 
2023-07-11 04:43:13,613	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -674,7 +674,7 @@
             vs.push(v);
 }/*auto*/
 }/*auto*/
-    order_heap.build(vs);
+    
 }
 
 

2023-07-11 05:00:17,705	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 617), ('core/Solver.cc.xml', 'stmt', 431))
2023-07-11 05:00:17,706	[INFO]	5       SUCCESS              +1020.4364 (100.08%) [1 edit(s)] 
2023-07-11 05:00:17,718	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -1058,6 +1058,9 @@
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
     for (int i = 0; i < assumptions.size(); i++){
+        if (!ok){
+        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        return; }
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }

2023-07-11 05:17:17,047	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 63))
2023-07-11 05:17:17,048	[INFO]	6       SUCCESS              +1015.6968 (99.61%) [1 edit(s)] 
2023-07-11 05:17:17,057	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -214,7 +214,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
-    if (c.learnt())/*auto*/{ learnts_literals += c.size();
+    if (c.learnt())/*auto*/{ 
 }/*auto*/
     else/*auto*/{            clauses_literals += c.size();
 }/*auto*/ }

2023-07-11 05:34:44,837	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 115), ('core/Solver.cc.xml', 'stmt', 302))
2023-07-11 05:34:44,838	[INFO]	7       SUCCESS              +1044.2839 (102.42%) [1 edit(s)] 
2023-07-11 05:34:44,849	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -296,6 +296,7 @@
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
+            vec<Lit>    learnt_clause;
             rnd_decisions++;
 }/*auto*/ }
 

2023-07-11 05:52:07,450	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 346))
2023-07-11 05:52:07,450	[INFO]	8       SUCCESS              +1039.1552 (101.91%) [1 edit(s)] 
2023-07-11 05:52:07,460	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -829,7 +829,7 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 

2023-07-11 06:09:28,040	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 447))
2023-07-11 06:09:28,041	[INFO]	9       SUCCESS              +1035.8882 (101.59%) [1 edit(s)] 
2023-07-11 06:09:28,052	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -1055,7 +1055,7 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);

2023-07-11 06:27:01,291	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 6), ('core/Solver.cc.xml', 'stmt', 31))
2023-07-11 06:27:01,292	[INFO]	10      SUCCESS              +1049.2468 (102.9%) [1 edit(s)] 
2023-07-11 06:27:01,312	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -136,6 +136,7 @@
 //
 Var Solver::newVar(bool sign, bool dvar)
 {
+    m        .push(0);
     int v = nVars();
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));

2023-07-11 06:46:06,363	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 343), ('core/Solver.cc.xml', 'stmt', 14))
2023-07-11 06:46:06,363	[INFO]	11      SUCCESS              +1141.1675 (111.92%) [1 edit(s)] 
2023-07-11 06:46:06,379	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -824,9 +824,7 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
                 cp = conflicts + (int32_t)opt_cp_increase;

2023-07-11 06:46:06,380	[INFO]	-- rebuild --
2023-07-11 07:03:41,424	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 63))
2023-07-11 07:03:41,425	[INFO]	12      SUCCESS              +1050.8076 (103.06%) [2 edit(s)] 
2023-07-11 07:03:41,435	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -214,7 +214,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
-    if (c.learnt())/*auto*/{ learnts_literals += c.size();
+    if (c.learnt())/*auto*/{ 
 }/*auto*/
     else/*auto*/{            clauses_literals += c.size();
 }/*auto*/ }
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-11 07:21:11,645	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 617), ('core/Solver.cc.xml', 'stmt', 431))
2023-07-11 07:21:11,646	[INFO]	13      SUCCESS              +1046.6765 (102.65%) [2 edit(s)] 
2023-07-11 07:21:11,658	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -1058,6 +1058,9 @@
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
     for (int i = 0; i < assumptions.size(); i++){
+        if (!ok){
+        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        return; }
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }

2023-07-11 07:38:35,995	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 447))
2023-07-11 07:38:35,996	[INFO]	14      SUCCESS              +1040.2752 (102.02%) [2 edit(s)] 
2023-07-11 07:38:36,015	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -1055,7 +1055,7 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);

2023-07-11 07:56:06,039	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 256), ('core/Solver.cc.xml', 'stmt', 50))
2023-07-11 07:56:06,039	[INFO]	15      SUCCESS              +1045.9926 (102.58%) [2 edit(s)] 
2023-07-11 07:56:06,053	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -522,6 +522,8 @@
         }
     }
 
+    return ok = false;
+
     seen[var(p)] = 0;
 }
 
@@ -708,7 +710,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-11 08:13:18,785	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 346))
2023-07-11 08:13:18,785	[INFO]	16      SUCCESS              +1029.0231 (100.92%) [2 edit(s)] 
2023-07-11 08:13:18,796	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -829,7 +829,7 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 

2023-07-11 08:30:43,981	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 115), ('core/Solver.cc.xml', 'stmt', 302))
2023-07-11 08:30:43,981	[INFO]	17      SUCCESS              +1041.6414 (102.16%) [2 edit(s)] 
2023-07-11 08:30:43,993	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -296,6 +296,7 @@
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
+            vec<Lit>    learnt_clause;
             rnd_decisions++;
 }/*auto*/ }
 
@@ -708,7 +709,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-11 08:47:41,515	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 6), ('core/Solver.cc.xml', 'stmt', 31))
2023-07-11 08:47:41,515	[INFO]	18      SUCCESS              +1014.0834 (99.45%) [2 edit(s)] 
2023-07-11 08:47:41,528	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -136,6 +136,7 @@
 //
 Var Solver::newVar(bool sign, bool dvar)
 {
+    m        .push(0);
     int v = nVars();
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
@@ -708,7 +709,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-11 09:06:33,536	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 280))
2023-07-11 09:06:33,536	[INFO]	19      SUCCESS              +1128.3401 (110.66%) [2 edit(s)] 
2023-07-11 09:06:33,547	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -674,7 +674,7 @@
             vs.push(v);
 }/*auto*/
 }/*auto*/
-    order_heap.build(vs);
+    
 }
 
 
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-11 09:25:52,156	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 343), ('core/Solver.cc.xml', 'stmt', 14))
2023-07-11 09:25:52,157	[INFO]	20      SUCCESS              +1154.646 (113.24%) [2 edit(s)] 
2023-07-11 09:25:52,168	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -824,9 +824,7 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
                 cp = conflicts + (int32_t)opt_cp_increase;

2023-07-11 09:25:52,168	[INFO]	-- simplify --
2023-07-11 09:25:52,177	[DEBUG]	
2023-07-11 09:25:52,177	[INFO]	21      SUCCESS              +1019.6473 (100.0%) [0 edit(s)] 
2023-07-11 09:25:52,185	[DEBUG]	
2023-07-11 09:25:52,194	[INFO]	==== END ====
2023-07-11 09:25:52,194	[INFO]	Reason: validation end
2023-07-11 09:25:52,194	[INFO]	
2023-07-11 09:25:52,194	[INFO]	==== REPORT ====
2023-07-11 09:25:52,194	[INFO]	Termination: validation end
2023-07-11 09:25:52,194	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1689039583.log
2023-07-11 09:25:52,203	[INFO]	Patch file: _magpie_logs/minisat-hack_1689039583.patch
2023-07-11 09:25:52,203	[INFO]	Diff file: _magpie_logs/minisat-hack_1689039583.diff
2023-07-11 09:25:52,203	[INFO]	Best fitness: 997.4052
2023-07-11 09:25:52,203	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 291))
2023-07-11 09:25:52,204	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

