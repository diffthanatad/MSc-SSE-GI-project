--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -13,7 +13,7 @@
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+            if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **************************************************************************************************/
@@ -111,7 +111,6 @@
 
     // Resource constraints:
     //
-  , conflict_budget    (-1)
   , propagation_budget (-1)
   , asynch_interrupt   (false)
 {
@@ -504,6 +503,7 @@
 /*_________________________________________________________________________________________________
 |
 |  propagate : [void]  ->  [Clause*]
+
 |
 |  Description:
 |    Propagates all enqueued facts. If a conflict arises, the conflicting clause is returned,
@@ -699,7 +699,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+        int beg = i == 0 ? 0 : trail_lim[i - 1];
             if (conflicts % 5000 == 0 && var_decay < 0.95)
                 var_decay += 0.01;
             if (decisionLevel() == 0) return l_False;
@@ -934,6 +934,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
+
     if (satisfied(c)) return;
 
     for (int i = 0; i < c.size(); i++)
@@ -959,6 +960,7 @@
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
         return; }
+
 
     vec<Var> map; Var max = 0;
 
@@ -968,7 +970,6 @@
     for (int i = 0; i < clauses.size(); i++)
         if (!satisfied(ca[clauses[i]]))
             cnt++;
-
     for (int i = 0; i < clauses.size(); i++)
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
