--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -502,7 +502,7 @@
         return;
 }/*auto*/
 
-    seen[var(p)] = 1;
+    static double K, R;
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -691,7 +691,7 @@
     assert(decisionLevel() == 0);
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
+        lS = 0, LQ.clear();
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
@@ -712,7 +712,7 @@
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -793,7 +793,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            gS = lS = tS = N = cp = 0;
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -850,7 +850,7 @@
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
-                    LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                    
                 }
                 core_added = 0;
             }
@@ -980,6 +980,22 @@
 }/*auto*/
 
     cancelUntil(0);
+
+    if (conflicts % 5000 == 0){
+                //learntsize_adjust_confl *= learntsize_adjust_inc;
+                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                //max_learnts             *= learntsize_inc;
+
+                if (verbosity >= 1)/*auto*/{
+                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                           (int)conflicts, 
+                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                           starts, conflicts / starts,
+                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+}/*auto*/
+            }
     return status;
 }
 
