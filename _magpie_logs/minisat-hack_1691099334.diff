--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -173,6 +173,9 @@
     }*/
 
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
+        if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
         if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
             return true;
 }/*auto*/
@@ -198,7 +201,7 @@
 }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
-        return ok = (propagate() == CRef_Undef);
+        
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
@@ -506,6 +509,7 @@
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
+        vec<Watcher>& ws = watches[p];
         if (seen[x]){
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
@@ -710,12 +714,12 @@
     removeSatisfied(learnts);
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
+        
 }/*auto*/
     checkGarbage();
-    rebuildOrderHeap();
-
-    simpDB_assigns = nAssigns();
+    
+
+    CRef    confl     = CRef_Undef;
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -821,7 +825,7 @@
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
                 cancelUntil(0);
-                return l_Undef; }
+                learnts.shrink(i - j); }
 
             // Simplify the set of problem clauses:
             if (decisionLevel() == 0 && !simplify())/*auto*/{
@@ -846,7 +850,7 @@
                         cancelUntil(0);
                         return l_Undef; }
                 }else{
-                    if (adjust > 0)/*auto*/{ adjust--;
+                    if (adjust > 0)/*auto*/{ 
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
@@ -898,7 +902,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        
     }
 
     return progress / nVars();
@@ -945,11 +949,12 @@
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
+    static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
     if (verbosity >= 1){
-        printf("c ============================[ Search Statistics ]==============================\n");
+        
         printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
         printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
         printf("c ===============================================================================\n");
@@ -965,9 +970,7 @@
         curr_restarts++;
     }
 
-    if (verbosity >= 1)/*auto*/{
-        printf("c ===============================================================================\n");
-}/*auto*/
+    
 
 
     if (status == l_True){
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5
 lbd-cut-max := 10
-cp-increase := 15000
+cp-increase := 5527
 core-tolerance := 0.02
 R-val := 1.4
 var-decay := 0.8
@@ -10,7 +10,7 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.8404860088548486
 verb := '1'
 pre := 'True'
 asymm := 'False'
