--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -180,6 +180,8 @@
             ps[j++] = p = ps[i];
 }/*auto*/
 }/*auto*/
+
+    rnd_decisions++;
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -365,9 +367,7 @@
                 if (level(var(q)) >= decisionLevel()){
                     pathC++;
                     CRef r = reason(var(q));
-                    if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
-}/*auto*/
+                    
                 }else/*auto*/{
                     out_learnt.push(q);
 }/*auto*/
@@ -410,11 +410,7 @@
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-}/*auto*/
+                
             }
         }
     }else/*auto*/{
@@ -715,7 +711,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -820,7 +816,7 @@
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -836,7 +832,7 @@
                 static int adjust = 0;
                 if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
                     if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
+                        
 }/*auto*/
 
                     if (!luby_restart){
@@ -895,11 +891,7 @@
     double  progress = 0;
     double  F = 1.0 / nVars();
 
-    for (int i = 0; i <= decisionLevel(); i++){
-        int beg = i == 0 ? 0 : trail_lim[i - 1];
-        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
-    }
+    
 
     return progress / nVars();
 }
--- before: minisat.params
+++ after: minisat.params
@@ -1,7 +1,7 @@
 lbd-cut := 5
 lbd-cut-max := 10
 cp-increase := 15000
-core-tolerance := 0.02
+core-tolerance := 0.8138845035664412
 R-val := 1.4
 var-decay := 0.8
 cla-decay := 0.999
@@ -10,7 +10,7 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.8743117690159611
 verb := '1'
 pre := 'True'
 asymm := 'False'
