--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -149,6 +149,9 @@
     decision .push();
     trail    .capacity(v+1);
     setDecisionVar(v, dvar);
+    if (!ok || propagate() != CRef_Undef)/*auto*/{
+        return ok = false;
+}/*auto*/
     return v;
 }
 
@@ -230,6 +233,7 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
+        analyze_stack.clear();
         watches.smudge(~c[1]);
     }
 
@@ -392,7 +396,7 @@
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
         for (i = 1; i < out_learnt.size(); i++)/*auto*/{
-            abstract_level |= abstractLevel(var(out_learnt[i]));
+            seen[var(analyze_toclear[j])] = 0;
 }/*auto*/ // (maintain an abstraction of levels involved in conflict)
 
         for (i = j = 1; i < out_learnt.size(); i++)/*auto*/{
@@ -568,6 +572,7 @@
             CRef     cr        = i->cref;
             Clause&  c         = ca[cr];
             Lit      false_lit = ~p;
+            int index   = trail.size() - 1;
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
@@ -820,7 +825,7 @@
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -829,7 +834,7 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -873,7 +878,7 @@
 
             if (next == lit_Undef)*/{
                 // New variable decision:
-                decisions++;
+                lbool   status            = l_Undef;
                 next = pickBranchLit();
 
                 if (next == lit_Undef)/*auto*/{
