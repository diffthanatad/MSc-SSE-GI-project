2023-07-15 10:48:34,416	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 15
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_5.sh
run_timeout = 1295
run_lengthout = 
fitness = perf_time

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 3
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5


2023-07-15 10:48:34,416	[INFO]	==== WARMUP ====
2023-07-15 11:05:59,616	[INFO]	WARM    SUCCESS               1036.4736               
2023-07-15 11:23:20,705	[INFO]	WARM    SUCCESS               1037.301                
2023-07-15 11:40:55,245	[INFO]	WARM    SUCCESS               1050.8353               
2023-07-15 11:40:55,245	[INFO]	INITIAL SUCCESS               1050.8353               
2023-07-15 11:40:55,245	[INFO]	==== START: ValidRankingSimplify ====
2023-07-15 11:40:55,458	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 25)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 284)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 114), ('core/Solver.cc.xml', 'stmt', 339)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 346), ('core/Solver.cc.xml', 'stmt', 195)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 232), ('core/Solver.cc.xml', 'stmt', 297)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 413)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 198), ('core/Solver.cc.xml', 'stmt', 23))
2023-07-15 11:40:55,458	[DEBUG]	CLEAN_SIZE: 8 (was 9)
2023-07-15 11:58:22,796	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 25)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 284)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 114), ('core/Solver.cc.xml', 'stmt', 339)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 346), ('core/Solver.cc.xml', 'stmt', 195)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 232), ('core/Solver.cc.xml', 'stmt', 297)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 413)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 198), ('core/Solver.cc.xml', 'stmt', 23))
2023-07-15 11:58:22,797	[INFO]	1       SUCCESS              *1043.8608 (99.34%) [9 edit(s)] 
2023-07-15 11:58:22,817	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        lS = 0, LQ.clear();
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -504,23 +495,7 @@
 
     seen[var(p)] = 1;
 
-    for (int i = trail.size()-1; i >= trail_lim[0]; i--){
-        Var x = var(trail[i]);
-        if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
-}/*auto*/
-            }
-            seen[x] = 0;
-        }
-    }
+    R = (double)opt_R;
 
     seen[var(p)] = 0;
 }
@@ -571,7 +546,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            simpDB_props   = clauses_literals + learnts_literals;
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -694,9 +669,7 @@
         return ok = false;
 }/*auto*/
 
-    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
-}/*auto*/
+    
 
     #define V learnts
     for (i = j = 0; i < V.size(); i++)/*auto*/{
@@ -708,7 +681,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -829,7 +802,9 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                if (decisionLevel() == 0)/*auto*/{
+        return;
+}/*auto*/
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -976,7 +951,7 @@
         for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
-        ok = false;
+        
 }/*auto*/
 
     cancelUntil(0);

2023-07-15 11:58:22,817	[INFO]	-- ranking --
2023-07-15 12:15:41,771	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 25))
2023-07-15 12:15:41,772	[INFO]	2       SUCCESS              *1035.41 (98.53%) [1 edit(s)] 
2023-07-15 12:15:41,781	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));

2023-07-15 12:32:59,113	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291))
2023-07-15 12:32:59,113	[INFO]	3       SUCCESS              *1033.8194 (98.38%) [1 edit(s)] 
2023-07-15 12:32:59,124	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 12:50:35,483	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 284))
2023-07-15 12:50:35,483	[INFO]	4       SUCCESS              +1052.671 (100.17%) [1 edit(s)] 
2023-07-15 12:50:35,493	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -694,9 +694,7 @@
         return ok = false;
 }/*auto*/
 
-    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
-}/*auto*/
+    
 
     #define V learnts
     for (i = j = 0; i < V.size(); i++)/*auto*/{

2023-07-15 13:08:17,373	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 114), ('core/Solver.cc.xml', 'stmt', 339))
2023-07-15 13:08:17,373	[INFO]	5       SUCCESS              +1058.4875 (100.73%) [1 edit(s)] 
2023-07-15 13:08:17,384	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        lS = 0, LQ.clear();
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];

2023-07-15 13:12:41,213	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 346), ('core/Solver.cc.xml', 'stmt', 195))
2023-07-15 13:12:41,213	[INFO]	6       RUN_CODE_ERROR        None  [1 edit(s)]       
2023-07-15 13:30:13,955	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62))
2023-07-15 13:30:13,955	[INFO]	7       SUCCESS              +1049.2548 (99.85%) [1 edit(s)] 
2023-07-15 13:30:13,966	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/

2023-07-15 13:49:04,260	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 232), ('core/Solver.cc.xml', 'stmt', 297))
2023-07-15 13:49:04,261	[INFO]	8       SUCCESS              +1126.8095 (107.23%) [1 edit(s)] 
2023-07-15 13:49:04,273	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -571,7 +571,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            simpDB_props   = clauses_literals + learnts_literals;
             i++;
 
             // If 0th watch is true, then clause is already satisfied.

2023-07-15 14:06:38,386	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 413))
2023-07-15 14:06:38,386	[INFO]	9       SUCCESS              +1050.2161 (99.94%) [1 edit(s)] 
2023-07-15 14:06:38,395	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -976,7 +976,7 @@
         for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
-        ok = false;
+        
 }/*auto*/
 
     cancelUntil(0);

2023-07-15 14:24:06,138	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 198), ('core/Solver.cc.xml', 'stmt', 23))
2023-07-15 14:24:06,139	[INFO]	10      SUCCESS              +1044.3766 (99.39%) [1 edit(s)] 
2023-07-15 14:24:06,149	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -504,23 +504,7 @@
 
     seen[var(p)] = 1;
 
-    for (int i = trail.size()-1; i >= trail_lim[0]; i--){
-        Var x = var(trail[i]);
-        if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
-}/*auto*/
-            }
-            seen[x] = 0;
-        }
-    }
+    R = (double)opt_R;
 
     seen[var(p)] = 0;
 }

2023-07-15 14:24:06,150	[INFO]	-- rebuild --
2023-07-15 14:41:26,673	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 25))
2023-07-15 14:41:26,673	[INFO]	11      SUCCESS              +1036.5752 (98.64%) [2 edit(s)] 
2023-07-15 14:41:26,693	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 14:59:06,938	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 198), ('core/Solver.cc.xml', 'stmt', 23))
2023-07-15 14:59:06,939	[INFO]	12      SUCCESS              +1056.8077 (100.57%) [2 edit(s)] 
2023-07-15 14:59:06,950	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -504,23 +504,7 @@
 
     seen[var(p)] = 1;
 
-    for (int i = trail.size()-1; i >= trail_lim[0]; i--){
-        Var x = var(trail[i]);
-        if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
-}/*auto*/
-            }
-            seen[x] = 0;
-        }
-    }
+    R = (double)opt_R;
 
     seen[var(p)] = 0;
 }
@@ -708,7 +692,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 15:16:24,221	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62))
2023-07-15 15:16:24,221	[INFO]	13      SUCCESS              *1033.6261 (98.36%) [2 edit(s)] 
2023-07-15 15:16:24,235	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/
@@ -708,7 +710,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 15:33:49,174	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 413))
2023-07-15 15:33:49,174	[INFO]	14      SUCCESS              +1041.1485 (99.08%) [3 edit(s)] 
2023-07-15 15:33:49,187	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/
@@ -708,7 +710,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -976,7 +978,7 @@
         for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
-        ok = false;
+        
 }/*auto*/
 
     cancelUntil(0);

2023-07-15 15:51:28,808	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 284))
2023-07-15 15:51:28,808	[INFO]	15      SUCCESS              +1056.2121 (100.51%) [3 edit(s)] 
2023-07-15 15:51:28,822	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/
@@ -694,9 +696,7 @@
         return ok = false;
 }/*auto*/
 
-    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
-}/*auto*/
+    
 
     #define V learnts
     for (i = j = 0; i < V.size(); i++)/*auto*/{
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 16:08:52,816	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 114), ('core/Solver.cc.xml', 'stmt', 339))
2023-07-15 16:08:52,817	[INFO]	16      SUCCESS              +1040.486 (99.02%) [3 edit(s)] 
2023-07-15 16:08:52,846	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        lS = 0, LQ.clear();
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -514,6 +505,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/
@@ -708,7 +701,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 16:26:57,776	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 232), ('core/Solver.cc.xml', 'stmt', 297))
2023-07-15 16:26:57,777	[INFO]	17      SUCCESS              +1081.3677 (102.91%) [3 edit(s)] 
2023-07-15 16:26:57,790	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/
@@ -571,7 +573,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            simpDB_props   = clauses_literals + learnts_literals;
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -708,7 +710,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 16:31:21,924	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 346), ('core/Solver.cc.xml', 'stmt', 195))
2023-07-15 16:31:21,925	[INFO]	18      RUN_CODE_ERROR        None  [3 edit(s)]       
2023-07-15 16:31:21,925	[INFO]	-- simplify --
2023-07-15 16:31:21,937	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62))
2023-07-15 16:31:21,937	[INFO]	19      SUCCESS              +1049.2548 (99.85%) [1 edit(s)] 
2023-07-15 16:31:21,947	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/

2023-07-15 16:31:21,957	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 291))
2023-07-15 16:31:21,957	[INFO]	20      SUCCESS              +1033.8194 (98.38%) [1 edit(s)] 
2023-07-15 16:31:21,966	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -708,7 +708,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

2023-07-15 16:31:21,977	[INFO]	==== END ====
2023-07-15 16:31:21,978	[INFO]	Reason: validation end
2023-07-15 16:31:21,978	[INFO]	
2023-07-15 16:31:21,978	[INFO]	==== REPORT ====
2023-07-15 16:31:21,978	[INFO]	Termination: validation end
2023-07-15 16:31:21,978	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1689414513.log
2023-07-15 16:31:21,990	[INFO]	Patch file: _magpie_logs/minisat-hack_1689414513.patch
2023-07-15 16:31:21,990	[INFO]	Diff file: _magpie_logs/minisat-hack_1689414513.diff
2023-07-15 16:31:21,990	[INFO]	Best fitness: 1033.6261
2023-07-15 16:31:21,990	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 291)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 275), ('core/Solver.cc.xml', 'stmt', 62))
2023-07-15 16:31:21,990	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -514,6 +514,8 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
                     if (level(var(c[j])) > 0)/*auto*/{
+                        if (c.learnt())/*auto*/{ learnts_literals += c.size();
+}/*auto*/
                         seen[var(c[j])] = 1;
 }/*auto*/
 }/*auto*/
@@ -708,7 +710,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/

