--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -346,6 +346,7 @@
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
+            conflicts++;
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
@@ -414,6 +415,7 @@
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
                         break; }
+                    removeSatisfied(clauses);
 }/*auto*/
             }
         }
@@ -712,6 +714,7 @@
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
+    lbool   status            = l_Undef;
     checkGarbage();
     rebuildOrderHeap();
 
@@ -840,6 +843,12 @@
 }/*auto*/
 
                     if (!luby_restart){
+                        if (verbosity >= 1){
+        printf("c ============================[ Search Statistics ]==============================\n");
+        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
+        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
+        printf("c ===============================================================================\n");
+    }
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();
@@ -1063,7 +1072,7 @@
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        toDimacs(f, ca[clauses[i]], map, max);
+        
 }/*auto*/
 
     if (verbosity > 0)/*auto*/{
--- before: minisat.params
+++ after: minisat.params
@@ -1,21 +1,21 @@
-lbd-cut := 5.0
+lbd-cut := 4.024828936782553
 lbd-cut-max := 10.0
-cp-increase := 15000
-core-tolerance := 0.02
+cp-increase := 5185
+core-tolerance := 0.20549745643327133
 var-decay := 0.95
 cla-decay := 0.999
 rnd-freq := 0.0
 ccmin-mode := 2
 phase-saving := 2
 rnd-init := 'False'
-luby := 0
+luby := 1
 gc-frac := 0.2
 verb := 1
 pre := 'True'
 asymm := 'False'
-rcheck := 'False'
+rcheck := 'True'
 elim := 'False'
 grow := 0
-cl-lim := 20
+cl-lim := 327
 sub-lim := 1000
 simp-gc-frac := 0.5
