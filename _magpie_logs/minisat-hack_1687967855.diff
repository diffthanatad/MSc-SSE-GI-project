--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -434,6 +434,7 @@
 }/*auto*/
     else{
         int max_i = 1;
+        core_added++;
         // Find the first literal assigned at the next-highest level:
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
             if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))/*auto*/{
@@ -495,7 +496,7 @@
 |________________________________________________________________________________________________@*/
 void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 {
-    out_conflict.clear();
+    
     out_conflict.push(p);
 
     if (decisionLevel() == 0)/*auto*/{
@@ -624,7 +625,7 @@
     ClauseAllocator& ca;
     reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
     bool operator () (CRef x, CRef y) { 
-        return /*ca[x].size() > 2 && (ca[y].size() == 2 ||*/ ca[x].activity() < ca[y].activity(); } 
+         } 
 };
 void Solver::reduceDB()
 {
@@ -1000,7 +1001,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ return;Var max = 0;
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
