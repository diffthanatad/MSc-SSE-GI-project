--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -694,9 +694,7 @@
         return ok = false;
 }/*auto*/
 
-    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
-}/*auto*/
+    
 
     #define V learnts
     for (i = j = 0; i < V.size(); i++)/*auto*/{
@@ -748,7 +746,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            starts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 var_decay += 0.01;
 }/*auto*/
@@ -797,21 +795,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -841,6 +825,7 @@
 
                     if (!luby_restart){
                         core_added = 0;
+                        return l_False;
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
@@ -1000,7 +985,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ return;printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
@@ -1015,9 +1000,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)/*auto*/{
-        fprintf(stderr, "could not open file %s\n", file), exit(1);
-}/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
