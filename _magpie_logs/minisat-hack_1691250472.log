2023-08-05 16:47:55,831	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_5.sh
run_timeout = 1600
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-05 16:47:55,832	[INFO]	==== WARMUP ====
2023-08-05 17:06:38,020	[INFO]	WARM    SUCCESS               1879911815976           
2023-08-05 17:06:38,021	[INFO]	INITIAL SUCCESS               1879911815976           
2023-08-05 17:06:38,021	[INFO]	==== START: ValidTest ====
2023-08-05 17:06:38,163	[DEBUG]	CLEAN_PATCH: StmtInsertion(('core/Solver.cc.xml', '_inter_block', 66), ('core/Solver.cc.xml', 'stmt', 309)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 161)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 64)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 43), ('core/Solver.cc.xml', 'stmt', 348)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 115), ('core/Solver.cc.xml', 'stmt', 1)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 282))
2023-08-05 17:06:38,163	[DEBUG]	CLEAN_SIZE: 8 (was 8)
2023-08-05 17:20:32,604	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 66), ('core/Solver.cc.xml', 'stmt', 309)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 161)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 64)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 43), ('core/Solver.cc.xml', 'stmt', 348)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 115), ('core/Solver.cc.xml', 'stmt', 1)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 282))
2023-08-05 17:20:32,606	[INFO]	1       SUCCESS              *1430642448092 (76.1%) [8 edit(s)] 
2023-08-05 17:20:32,624	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -172,14 +172,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    static int adjust = 0;
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -216,7 +209,7 @@
     watches[~c[1]].push(Watcher(cr, c[0]));
     if (c.learnt())/*auto*/{ learnts_literals += c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals += c.size();
+    else/*auto*/{            
 }/*auto*/ }
 
 
@@ -235,6 +228,10 @@
 
     if (c.learnt())/*auto*/{ learnts_literals -= c.size();
 }/*auto*/
+
+    if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
     else/*auto*/{            clauses_literals -= c.size();
 }/*auto*/ }
 
@@ -254,7 +251,7 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -342,11 +339,11 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
+            static double K, R;
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -425,7 +422,7 @@
     out_learnt.shrink(i - j);
     tot_literals += out_learnt.size();
 
-    LBD(out_learnt);
+    
 
     // Find correct backtrack level:
     //
@@ -690,9 +687,7 @@
 {
     assert(decisionLevel() == 0);
 
-    if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
-}/*auto*/
+    
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
         return true;

2023-08-05 17:20:32,639	[INFO]	==== END ====
2023-08-05 17:20:32,639	[INFO]	Reason: validation end
2023-08-05 17:20:32,639	[INFO]	
2023-08-05 17:20:32,639	[INFO]	==== REPORT ====
2023-08-05 17:20:32,640	[INFO]	Termination: validation end
2023-08-05 17:20:32,640	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691250472.log
2023-08-05 17:20:32,655	[INFO]	Patch file: _magpie_logs/minisat-hack_1691250472.patch
2023-08-05 17:20:32,655	[INFO]	Diff file: _magpie_logs/minisat-hack_1691250472.diff
2023-08-05 17:20:32,655	[INFO]	Best fitness: 1430642448092
2023-08-05 17:20:32,655	[INFO]	Best patch: StmtInsertion(('core/Solver.cc.xml', '_inter_block', 66), ('core/Solver.cc.xml', 'stmt', 309)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 161)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 64)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 43), ('core/Solver.cc.xml', 'stmt', 348)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 115), ('core/Solver.cc.xml', 'stmt', 1)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 282))
2023-08-05 17:20:32,655	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -172,14 +172,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    static int adjust = 0;
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -216,7 +209,7 @@
     watches[~c[1]].push(Watcher(cr, c[0]));
     if (c.learnt())/*auto*/{ learnts_literals += c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals += c.size();
+    else/*auto*/{            
 }/*auto*/ }
 
 
@@ -235,6 +228,10 @@
 
     if (c.learnt())/*auto*/{ learnts_literals -= c.size();
 }/*auto*/
+
+    if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
     else/*auto*/{            clauses_literals -= c.size();
 }/*auto*/ }
 
@@ -254,7 +251,7 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -342,11 +339,11 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
+            static double K, R;
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -425,7 +422,7 @@
     out_learnt.shrink(i - j);
     tot_literals += out_learnt.size();
 
-    LBD(out_learnt);
+    
 
     // Find correct backtrack level:
     //
@@ -690,9 +687,7 @@
 {
     assert(decisionLevel() == 0);
 
-    if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
-}/*auto*/
+    
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
         return true;

