2023-08-03 20:07:32,659	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/test_3.sh
run_timeout = 5287
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-03 20:07:32,660	[INFO]	==== WARMUP ====
2023-08-03 21:31:25,082	[INFO]	WARM    SUCCESS               8210478286980           
2023-08-03 21:31:25,083	[INFO]	INITIAL SUCCESS               8210478286980           
2023-08-03 21:31:25,083	[INFO]	==== START: ValidTest ====
2023-08-03 21:31:25,238	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 129)) | ParamSetting(('minisat.params', 'core-tolerance'), 0.8138845035664412) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 373)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 26), ('core/Solver.cc.xml', 'stmt', 99)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 341)) | ParamSetting(('minisat.params', 'gc-frac'), 0.8743117690159611) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 296)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 351)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 153))
2023-08-03 21:31:25,238	[DEBUG]	CLEAN_SIZE: 9 (was 9)
2023-08-03 22:48:53,287	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 129)) | ParamSetting(('minisat.params', 'core-tolerance'), 0.8138845035664412) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 373)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 26), ('core/Solver.cc.xml', 'stmt', 99)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 341)) | ParamSetting(('minisat.params', 'gc-frac'), 0.8743117690159611) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 296)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 351)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 153))
2023-08-03 22:48:53,287	[INFO]	1       SUCCESS              *7747779808192 (94.36%) [9 edit(s)] 
2023-08-03 22:48:53,308	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -180,6 +180,8 @@
             ps[j++] = p = ps[i];
 }/*auto*/
 }/*auto*/
+
+    rnd_decisions++;
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -365,9 +367,7 @@
                 if (level(var(q)) >= decisionLevel()){
                     pathC++;
                     CRef r = reason(var(q));
-                    if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
-}/*auto*/
+                    
                 }else/*auto*/{
                     out_learnt.push(q);
 }/*auto*/
@@ -410,11 +410,7 @@
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-}/*auto*/
+                
             }
         }
     }else/*auto*/{
@@ -715,7 +711,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -820,7 +816,7 @@
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -836,7 +832,7 @@
                 static int adjust = 0;
                 if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
                     if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
+                        
 }/*auto*/
 
                     if (!luby_restart){
@@ -895,11 +891,7 @@
     double  progress = 0;
     double  F = 1.0 / nVars();
 
-    for (int i = 0; i <= decisionLevel(); i++){
-        int beg = i == 0 ? 0 : trail_lim[i - 1];
-        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
-    }
+    
 
     return progress / nVars();
 }
--- before: minisat.params
+++ after: minisat.params
@@ -1,7 +1,7 @@
 lbd-cut := 5
 lbd-cut-max := 10
 cp-increase := 15000
-core-tolerance := 0.02
+core-tolerance := 0.8138845035664412
 R-val := 1.4
 var-decay := 0.8
 cla-decay := 0.999
@@ -10,7 +10,7 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.8743117690159611
 verb := '1'
 pre := 'True'
 asymm := 'False'

2023-08-03 22:48:53,322	[INFO]	==== END ====
2023-08-03 22:48:53,322	[INFO]	Reason: validation end
2023-08-03 22:48:53,322	[INFO]	
2023-08-03 22:48:53,322	[INFO]	==== REPORT ====
2023-08-03 22:48:53,322	[INFO]	Termination: validation end
2023-08-03 22:48:53,322	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691089649.log
2023-08-03 22:48:53,336	[INFO]	Patch file: _magpie_logs/minisat-hack_1691089649.patch
2023-08-03 22:48:53,336	[INFO]	Diff file: _magpie_logs/minisat-hack_1691089649.diff
2023-08-03 22:48:53,336	[INFO]	Best fitness: 7747779808192
2023-08-03 22:48:53,337	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 129)) | ParamSetting(('minisat.params', 'core-tolerance'), 0.8138845035664412) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 373)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 26), ('core/Solver.cc.xml', 'stmt', 99)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 341)) | ParamSetting(('minisat.params', 'gc-frac'), 0.8743117690159611) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 296)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 351)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 153))
2023-08-03 22:48:53,337	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -180,6 +180,8 @@
             ps[j++] = p = ps[i];
 }/*auto*/
 }/*auto*/
+
+    rnd_decisions++;
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -365,9 +367,7 @@
                 if (level(var(q)) >= decisionLevel()){
                     pathC++;
                     CRef r = reason(var(q));
-                    if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
-}/*auto*/
+                    
                 }else/*auto*/{
                     out_learnt.push(q);
 }/*auto*/
@@ -410,11 +410,7 @@
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-}/*auto*/
+                
             }
         }
     }else/*auto*/{
@@ -715,7 +711,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -820,7 +816,7 @@
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -836,7 +832,7 @@
                 static int adjust = 0;
                 if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
                     if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
+                        
 }/*auto*/
 
                     if (!luby_restart){
@@ -895,11 +891,7 @@
     double  progress = 0;
     double  F = 1.0 / nVars();
 
-    for (int i = 0; i <= decisionLevel(); i++){
-        int beg = i == 0 ? 0 : trail_lim[i - 1];
-        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
-    }
+    
 
     return progress / nVars();
 }
--- before: minisat.params
+++ after: minisat.params
@@ -1,7 +1,7 @@
 lbd-cut := 5
 lbd-cut-max := 10
 cp-increase := 15000
-core-tolerance := 0.02
+core-tolerance := 0.8138845035664412
 R-val := 1.4
 var-decay := 0.8
 cla-decay := 0.999
@@ -10,7 +10,7 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.8743117690159611
 verb := '1'
 pre := 'True'
 asymm := 'False'

