2023-08-03 13:51:26,970	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_6.sh
run_timeout = 1561
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-03 13:51:26,971	[INFO]	==== WARMUP ====
2023-08-03 14:09:10,495	[INFO]	WARM    SUCCESS               1805212255481           
2023-08-03 14:09:10,496	[INFO]	INITIAL SUCCESS               1805212255481           
2023-08-03 14:09:10,496	[INFO]	==== START: ValidTest ====
2023-08-03 14:09:10,613	[DEBUG]	CLEAN_PATCH: StmtReplacement(('core/Solver.cc.xml', 'stmt', 197), ('core/Solver.cc.xml', 'stmt', 1)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 294)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 541), ('core/Solver.cc.xml', 'stmt', 335)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 333), ('core/Solver.cc.xml', 'stmt', 20)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 362)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 283), ('core/Solver.cc.xml', 'stmt', 316))
2023-08-03 14:09:10,613	[DEBUG]	CLEAN_SIZE: 7 (was 7)
2023-08-03 14:26:54,350	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 197), ('core/Solver.cc.xml', 'stmt', 1)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 294)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 541), ('core/Solver.cc.xml', 'stmt', 335)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 333), ('core/Solver.cc.xml', 'stmt', 20)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 362)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 283), ('core/Solver.cc.xml', 'stmt', 316))
2023-08-03 14:26:54,351	[INFO]	1       SUCCESS              *2172048239500 (120.32%) [7 edit(s)] 
2023-08-03 14:26:54,381	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -502,7 +502,7 @@
         return;
 }/*auto*/
 
-    seen[var(p)] = 1;
+    static double K, R;
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -691,7 +691,7 @@
     assert(decisionLevel() == 0);
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
+        lS = 0, LQ.clear();
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
@@ -712,7 +712,7 @@
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -793,7 +793,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            gS = lS = tS = N = cp = 0;
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -850,7 +850,7 @@
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
-                    LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                    
                 }
                 core_added = 0;
             }
@@ -980,6 +980,22 @@
 }/*auto*/
 
     cancelUntil(0);
+
+    if (conflicts % 5000 == 0){
+                //learntsize_adjust_confl *= learntsize_adjust_inc;
+                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                //max_learnts             *= learntsize_inc;
+
+                if (verbosity >= 1)/*auto*/{
+                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                           (int)conflicts, 
+                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                           starts, conflicts / starts,
+                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+}/*auto*/
+            }
     return status;
 }
 

2023-08-03 14:26:54,402	[INFO]	==== END ====
2023-08-03 14:26:54,402	[INFO]	Reason: validation end
2023-08-03 14:26:54,402	[INFO]	
2023-08-03 14:26:54,402	[INFO]	==== REPORT ====
2023-08-03 14:26:54,403	[INFO]	Termination: validation end
2023-08-03 14:26:54,403	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691067083.log
2023-08-03 14:26:54,422	[INFO]	Patch file: _magpie_logs/minisat-hack_1691067083.patch
2023-08-03 14:26:54,422	[INFO]	Diff file: _magpie_logs/minisat-hack_1691067083.diff
2023-08-03 14:26:54,422	[INFO]	Best fitness: 2172048239500
2023-08-03 14:26:54,422	[INFO]	Best patch: StmtReplacement(('core/Solver.cc.xml', 'stmt', 197), ('core/Solver.cc.xml', 'stmt', 1)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 294)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 541), ('core/Solver.cc.xml', 'stmt', 335)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 333), ('core/Solver.cc.xml', 'stmt', 20)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 362)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 283), ('core/Solver.cc.xml', 'stmt', 316))
2023-08-03 14:26:54,422	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -502,7 +502,7 @@
         return;
 }/*auto*/
 
-    seen[var(p)] = 1;
+    static double K, R;
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -691,7 +691,7 @@
     assert(decisionLevel() == 0);
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
+        lS = 0, LQ.clear();
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
@@ -712,7 +712,7 @@
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -793,7 +793,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            gS = lS = tS = N = cp = 0;
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -850,7 +850,7 @@
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
-                    LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                    
                 }
                 core_added = 0;
             }
@@ -980,6 +980,22 @@
 }/*auto*/
 
     cancelUntil(0);
+
+    if (conflicts % 5000 == 0){
+                //learntsize_adjust_confl *= learntsize_adjust_inc;
+                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                //max_learnts             *= learntsize_inc;
+
+                if (verbosity >= 1)/*auto*/{
+                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                           (int)conflicts, 
+                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                           starts, conflicts / starts,
+                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+}/*auto*/
+            }
     return status;
 }
 

