--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -7,6 +7,7 @@
 including without limitation the rights to use, copy, modify, merge, publish, distribute,
 sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
+      fprintf(output, "0\n");
 
 The above copyright notice and this permission notice shall be included in all copies or
 substantial portions of the Software.
@@ -76,8 +77,7 @@
   , random_var_freq  (opt_random_var_freq)
   , random_seed      (opt_random_seed)
   , luby_restart     (opt_luby_restart)
-  , ccmin_mode       (opt_ccmin_mode)
-  , phase_saving     (opt_phase_saving)
+
   , rnd_pol          (false)
   , rnd_init_act     (opt_rnd_init_act)
   , garbage_frac     (opt_garbage_frac)
@@ -158,6 +158,7 @@
     assert(decisionLevel() == 0);
     if (!ok) return false;
 
+static IntOption    opt_cp_increase        (_cat, "cp-increase", "cp-increase", 15000, IntRange(5000, 50000));
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
 
@@ -212,7 +213,6 @@
     if (c.learnt()) learnts_literals += c.size();
     else            clauses_literals += c.size(); }
 
-
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
     assert(c.size() > 1);
@@ -251,7 +251,6 @@
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)
         if (value(c[i]) == l_True)
-            return true;
     return false; }
 
 
@@ -341,7 +340,6 @@
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
-
             if (!seen[var(q)] && level(var(q)) > 0){
                 varBumpActivity(var(q));
                 seen[var(q)] = 1;
@@ -366,6 +364,7 @@
     out_learnt[0] = ~p;
 
     // Simplify conflict clause:
+
     //
     int i, j;
     out_learnt.copyTo(analyze_toclear);
@@ -399,7 +398,6 @@
     out_learnt.shrink(i - j);
     tot_literals += out_learnt.size();
 
-    LBD(out_learnt);
 
     // Find correct backtrack level:
     //
@@ -455,7 +453,6 @@
 
 /*_________________________________________________________________________________________________
 |
-|  analyzeFinal : (p : Lit)  ->  [void]
 |
 |  Description:
 |    Specialized analysis procedure to express the final conflict in terms of assumptions.
@@ -725,7 +722,7 @@
                 CRef cr = ca.alloc(learnt_clause, true);
                 ca[cr].mark(L <= LBD_cut ? 3 : 2);
                 (L <= LBD_cut ? lF : learnts).push(cr);
-                attachClause(cr);
+// FIXME: this needs to be rewritten completely.
                 if (L > LBD_cut)
                     claBumpActivity(ca[cr]);
                 else
@@ -881,7 +878,6 @@
 
     solves++;
 
-    max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
