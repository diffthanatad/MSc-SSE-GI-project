--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -138,7 +138,7 @@
 {
     int v = nVars();
     watches  .init(mkLit(v, false));
-    watches  .init(mkLit(v, true ));
+    
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
@@ -695,7 +695,7 @@
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
+        
 }/*auto*/
 
     #define V learnts
@@ -704,7 +704,7 @@
             V[j++] = V[i];
 }/*auto*/
 }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -757,6 +757,7 @@
 
             if (!luby_restart){
                 PUSH(TQ, trail.size(), 5000, tS);
+                static BoolOption    opt_rnd_init_act      (_cat, "rnd-init",    "Randomize the initial activity", false);
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
                     lS = 0, LQ.clear();
 }/*auto*/
@@ -793,7 +794,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            static IntOption    opt_lbd_cut_max        (_cat, "lbd-cut-max", "LBD max cut point", 10, IntRange(4, 30));
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -846,7 +847,7 @@
                         cancelUntil(0);
                         return l_Undef; }
                 }else{
-                    if (adjust > 0)/*auto*/{ adjust--;
+                    if (adjust > 0)/*auto*/{ claDecayActivity();adjust--;
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
