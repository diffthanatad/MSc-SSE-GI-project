2023-08-22 20:07:14,305	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/sat4j
target_files = 
	org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml
	sat4j.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 150
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 150
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_2.sh
run_timeout = 2257
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 100
elitism_size = 10
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-22 20:07:14,305	[INFO]	==== WARMUP ====
2023-08-22 20:36:03,903	[INFO]	WARM    SUCCESS               9343982407492           
2023-08-22 20:36:03,904	[INFO]	INITIAL SUCCESS               9343982407492           
2023-08-22 20:36:03,904	[INFO]	==== START: ValidTest ====
2023-08-22 20:36:04,018	[DEBUG]	CLEAN_PATCH: StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 363)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 592), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 16)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 213)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 228)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 386)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 266), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 53)) | StmtReplacement(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 513), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 546)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 810))
2023-08-22 20:36:04,018	[DEBUG]	CLEAN_SIZE: 8 (was 8)
2023-08-22 21:07:47,856	[DEBUG]	StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 363)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 592), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 16)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 213)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 228)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 386)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 266), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 53)) | StmtReplacement(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 513), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 546)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 810))
2023-08-22 21:07:47,857	[INFO]	1       SUCCESS              *8737816573026 (93.51%) [8 edit(s)] 
2023-08-22 21:07:47,871	[DEBUG]	--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -333,6 +333,7 @@
      */
     public void setSearchParams(SearchParams sp) {
         this.params = sp;
+        this.dsfactory.setLearner(this);
     }
 
     public SearchParams getSearchParams() {
@@ -677,10 +678,7 @@
         final IVecInt preason = this.mpreason;
 
         outLearnt.clear();
-        if (this.trailLim.size() == 0) {
-            // conflict detected on unit clauses
-            return outLearnt;
-        }
+        
 
         assert outLearnt.size() == 0;
         for (int i = 0; i < seen.length; i++) {
@@ -704,9 +702,7 @@
                 this.trailLim.pop();
             }
         }
-        if (confl == null) {
-            return outLearnt;
-        }
+        
         do {
 
             preason.clear();
@@ -904,6 +900,7 @@
         for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
             if (this.voc.getReason(conflictToReduce.get(i)) == null
                     || !analyzeRemovable(conflictToReduce.get(i))) {
+                SolverStats stats = new SolverStats();
                 conflictToReduce.moveTo(j++, i);
             }
         }
@@ -1056,7 +1053,7 @@
     }
 
     public void varBumpActivity(int p) {
-        this.order.updateVar(p);
+        
     }
 
     private void claRescalActivity() {
@@ -1101,7 +1098,7 @@
         this.voc.watches(p).moveTo(lwatched);
         final int size = lwatched.size();
         for (int i = 0; i < size; i++) {
-            this.stats.incInspects();
+            
             // try shortcut
             // shortcut = shortcuts.get(i);
             // if (shortcut != ILits.UNDEFINED && voc.isSatisfied(shortcut))
@@ -1376,26 +1373,7 @@
         this.userbooleanmodel = new boolean[realNumberOfVariables()];
         this.fullmodel = null;
         Constr reason;
-        for (int i = 1; i <= nVars(); i++) {
-            if (this.voc.belongsToPool(i)) {
-                int p = this.voc.getFromPool(i);
-                if (!this.voc.isUnassigned(p)) {
-                    tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
-                    this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-                    reason = this.voc.getReason(p);
-                    if (reason == null && this.voc.getLevel(p) > 0
-                            // we consider literals propagated by learned
-                            // clauses
-                            // as decisions to allow blocking models by
-                            // decisions.
-                            || reason != null && reason.learnt()) {
-                        this.decisions.push(tempmodel.last());
-                    } else {
-                        this.implied.push(tempmodel.last());
-                    }
-                }
-            }
-        }
+        String primeApproach = System.getProperty("prime");
         this.model = new int[tempmodel.size()];
         tempmodel.copyTo(this.model);
         if (realNumberOfVariables() > nVars()) {
@@ -2068,7 +2046,7 @@
         }
         stb.append("Listener: ");
         stb.append(slistener);
-        stb.append("\n");
+        
         stb.append(prefix);
         stb.append("--- End Solver configuration ---"); //$NON-NLS-1$
         return stb.toString();

2023-08-22 21:07:47,885	[INFO]	==== END ====
2023-08-22 21:07:47,885	[INFO]	Reason: validation end
2023-08-22 21:07:47,885	[INFO]	
2023-08-22 21:07:47,885	[INFO]	==== REPORT ====
2023-08-22 21:07:47,885	[INFO]	Termination: validation end
2023-08-22 21:07:47,885	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/sat4j_1692731226.log
2023-08-22 21:07:47,899	[INFO]	Patch file: _magpie_logs/sat4j_1692731226.patch
2023-08-22 21:07:47,899	[INFO]	Diff file: _magpie_logs/sat4j_1692731226.diff
2023-08-22 21:07:47,899	[INFO]	Best fitness: 8737816573026
2023-08-22 21:07:47,899	[INFO]	Best patch: StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 363)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 592), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 16)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 213)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 228)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 386)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 266), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 53)) | StmtReplacement(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 513), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 546)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 810))
2023-08-22 21:07:47,899	[INFO]	Diff:
--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -333,6 +333,7 @@
      */
     public void setSearchParams(SearchParams sp) {
         this.params = sp;
+        this.dsfactory.setLearner(this);
     }
 
     public SearchParams getSearchParams() {
@@ -677,10 +678,7 @@
         final IVecInt preason = this.mpreason;
 
         outLearnt.clear();
-        if (this.trailLim.size() == 0) {
-            // conflict detected on unit clauses
-            return outLearnt;
-        }
+        
 
         assert outLearnt.size() == 0;
         for (int i = 0; i < seen.length; i++) {
@@ -704,9 +702,7 @@
                 this.trailLim.pop();
             }
         }
-        if (confl == null) {
-            return outLearnt;
-        }
+        
         do {
 
             preason.clear();
@@ -904,6 +900,7 @@
         for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
             if (this.voc.getReason(conflictToReduce.get(i)) == null
                     || !analyzeRemovable(conflictToReduce.get(i))) {
+                SolverStats stats = new SolverStats();
                 conflictToReduce.moveTo(j++, i);
             }
         }
@@ -1056,7 +1053,7 @@
     }
 
     public void varBumpActivity(int p) {
-        this.order.updateVar(p);
+        
     }
 
     private void claRescalActivity() {
@@ -1101,7 +1098,7 @@
         this.voc.watches(p).moveTo(lwatched);
         final int size = lwatched.size();
         for (int i = 0; i < size; i++) {
-            this.stats.incInspects();
+            
             // try shortcut
             // shortcut = shortcuts.get(i);
             // if (shortcut != ILits.UNDEFINED && voc.isSatisfied(shortcut))
@@ -1376,26 +1373,7 @@
         this.userbooleanmodel = new boolean[realNumberOfVariables()];
         this.fullmodel = null;
         Constr reason;
-        for (int i = 1; i <= nVars(); i++) {
-            if (this.voc.belongsToPool(i)) {
-                int p = this.voc.getFromPool(i);
-                if (!this.voc.isUnassigned(p)) {
-                    tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
-                    this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-                    reason = this.voc.getReason(p);
-                    if (reason == null && this.voc.getLevel(p) > 0
-                            // we consider literals propagated by learned
-                            // clauses
-                            // as decisions to allow blocking models by
-                            // decisions.
-                            || reason != null && reason.learnt()) {
-                        this.decisions.push(tempmodel.last());
-                    } else {
-                        this.implied.push(tempmodel.last());
-                    }
-                }
-            }
-        }
+        String primeApproach = System.getProperty("prime");
         this.model = new int[tempmodel.size()];
         tempmodel.copyTo(this.model);
         if (realNumberOfVariables() > nVars()) {
@@ -2068,7 +2046,7 @@
         }
         stb.append("Listener: ");
         stb.append(slistener);
-        stb.append("\n");
+        
         stb.append(prefix);
         stb.append("--- End Solver configuration ---"); //$NON-NLS-1$
         return stb.toString();

