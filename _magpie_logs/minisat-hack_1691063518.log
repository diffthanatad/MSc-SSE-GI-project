2023-08-03 12:52:03,143	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_4.sh
run_timeout = 1538
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-03 12:52:03,144	[INFO]	==== WARMUP ====
2023-08-03 13:09:38,908	[INFO]	WARM    SUCCESS               1766634330070           
2023-08-03 13:09:38,908	[INFO]	INITIAL SUCCESS               1766634330070           
2023-08-03 13:09:38,909	[INFO]	==== START: ValidTest ====
2023-08-03 13:09:39,048	[DEBUG]	CLEAN_PATCH: StmtReplacement(('core/Solver.cc.xml', 'stmt', 307), ('core/Solver.cc.xml', 'stmt', 258)) | ParamSetting(('minisat.params', 'ccmin-mode'), '1') | ParamSetting(('minisat.params', 'simp-gc-frac'), 0.603297055615674) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 296), ('core/Solver.cc.xml', 'stmt', 333)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 376), ('core/Solver.cc.xml', 'stmt', 11)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 610), ('core/Solver.cc.xml', 'stmt', 2)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 250), ('core/Solver.cc.xml', 'stmt', 283)) | ParamSetting(('minisat.params', 'verb'), '0')
2023-08-03 13:09:39,048	[DEBUG]	CLEAN_SIZE: 8 (was 8)
2023-08-03 13:27:27,449	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 307), ('core/Solver.cc.xml', 'stmt', 258)) | ParamSetting(('minisat.params', 'ccmin-mode'), '1') | ParamSetting(('minisat.params', 'simp-gc-frac'), 0.603297055615674) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 296), ('core/Solver.cc.xml', 'stmt', 333)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 376), ('core/Solver.cc.xml', 'stmt', 11)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 610), ('core/Solver.cc.xml', 'stmt', 2)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 250), ('core/Solver.cc.xml', 'stmt', 283)) | ParamSetting(('minisat.params', 'verb'), '0')
2023-08-03 13:27:27,450	[INFO]	1       SUCCESS              *1779233155191 (100.71%) [8 edit(s)] 
2023-08-03 13:27:27,469	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -472,6 +472,7 @@
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
                         seen[var(analyze_toclear[j])] = 0;
+                        return ok = false;
 }/*auto*/
                     analyze_toclear.shrink(analyze_toclear.size() - top);
                     return false;
@@ -715,7 +716,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    varDecayActivity();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -748,7 +749,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            int     i, j; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 var_decay += 0.01;
 }/*auto*/
@@ -898,7 +899,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
     }
 
     return progress / nVars();
@@ -1043,6 +1044,7 @@
         
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]])){
+            static const char* _cat = "CORE";
             Clause& c = ca[clauses[i]];
             for (int j = 0; j < c.size(); j++)/*auto*/{
                 if (value(c[j]) != l_False)/*auto*/{
--- before: minisat.params
+++ after: minisat.params
@@ -6,12 +6,12 @@
 var-decay := 0.8
 cla-decay := 0.999
 rnd-freq := 0.0
-ccmin-mode := '2'
+ccmin-mode := '1'
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
 gc-frac := 0.2
-verb := '1'
+verb := '0'
 pre := 'True'
 asymm := 'False'
 rcheck := 'False'
@@ -19,4 +19,4 @@
 grow := 0
 cl-lim := 20
 sub-lim := 1000
-simp-gc-frac := 0.5
+simp-gc-frac := 0.603297055615674

2023-08-03 13:27:27,485	[INFO]	==== END ====
2023-08-03 13:27:27,485	[INFO]	Reason: validation end
2023-08-03 13:27:27,485	[INFO]	
2023-08-03 13:27:27,485	[INFO]	==== REPORT ====
2023-08-03 13:27:27,485	[INFO]	Termination: validation end
2023-08-03 13:27:27,485	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691063518.log
2023-08-03 13:27:27,501	[INFO]	Patch file: _magpie_logs/minisat-hack_1691063518.patch
2023-08-03 13:27:27,501	[INFO]	Diff file: _magpie_logs/minisat-hack_1691063518.diff
2023-08-03 13:27:27,501	[INFO]	Best fitness: 1779233155191
2023-08-03 13:27:27,501	[INFO]	Best patch: StmtReplacement(('core/Solver.cc.xml', 'stmt', 307), ('core/Solver.cc.xml', 'stmt', 258)) | ParamSetting(('minisat.params', 'ccmin-mode'), '1') | ParamSetting(('minisat.params', 'simp-gc-frac'), 0.603297055615674) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 296), ('core/Solver.cc.xml', 'stmt', 333)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 376), ('core/Solver.cc.xml', 'stmt', 11)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 610), ('core/Solver.cc.xml', 'stmt', 2)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 250), ('core/Solver.cc.xml', 'stmt', 283)) | ParamSetting(('minisat.params', 'verb'), '0')
2023-08-03 13:27:27,502	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -472,6 +472,7 @@
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
                         seen[var(analyze_toclear[j])] = 0;
+                        return ok = false;
 }/*auto*/
                     analyze_toclear.shrink(analyze_toclear.size() - top);
                     return false;
@@ -715,7 +716,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    varDecayActivity();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -748,7 +749,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            int     i, j; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 var_decay += 0.01;
 }/*auto*/
@@ -898,7 +899,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
     }
 
     return progress / nVars();
@@ -1043,6 +1044,7 @@
         
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]])){
+            static const char* _cat = "CORE";
             Clause& c = ca[clauses[i]];
             for (int j = 0; j < c.size(); j++)/*auto*/{
                 if (value(c[j]) != l_False)/*auto*/{
--- before: minisat.params
+++ after: minisat.params
@@ -6,12 +6,12 @@
 var-decay := 0.8
 cla-decay := 0.999
 rnd-freq := 0.0
-ccmin-mode := '2'
+ccmin-mode := '1'
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
 gc-frac := 0.2
-verb := '1'
+verb := '0'
 pre := 'True'
 asymm := 'False'
 rcheck := 'False'
@@ -19,4 +19,4 @@
 grow := 0
 cl-lim := 20
 sub-lim := 1000
-simp-gc-frac := 0.5
+simp-gc-frac := 0.603297055615674

