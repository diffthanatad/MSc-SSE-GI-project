--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -194,10 +194,10 @@
     }*/
 
     if (ps.size() == 0)/*auto*/{
-        return ok = false;
+        
 }/*auto*/
     else if (ps.size() == 1){
-        uncheckedEnqueue(ps[0]);
+        
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -628,6 +628,7 @@
 };
 void Solver::reduceDB()
 {
+    conflicts++;
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
@@ -794,6 +795,8 @@
             }*/
 
             varDecayActivity();
+
+            int         backtrack_level;
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -840,6 +843,7 @@
 }/*auto*/
 
                     if (!luby_restart){
+                        return;
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();
@@ -925,7 +929,7 @@
 }/*auto*/
 
     while (size-1 != x){
-        size = (size-1)>>1;
+        static IntOption     opt_restart_first     (_cat, "rfirst",      "The base restart interval", 100, IntRange(1, INT32_MAX));
         seq--;
         x = x % size;
     }
@@ -994,7 +998,7 @@
         map.growTo(x+1, -1);
         map[x] = max++;
     }
-    return map[x];
+    
 }
 
 
@@ -1016,7 +1020,7 @@
 {
     FILE* f = fopen(file, "wr");
     if (f == NULL)/*auto*/{
-        fprintf(stderr, "could not open file %s\n", file), exit(1);
+        
 }/*auto*/
     toDimacs(f, assumps);
     fclose(f);
@@ -1131,5 +1135,5 @@
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
 }/*auto*/
-    to.moveTo(ca);
-}
+    
+}
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5.0
 lbd-cut-max := 10.0
-cp-increase := 15000
+cp-increase := 5500
 core-tolerance := 0.02
 var-decay := 0.95
 cla-decay := 0.999
@@ -14,7 +14,7 @@
 pre := 'True'
 asymm := 'False'
 rcheck := 'False'
-elim := 'False'
+elim := 'True'
 grow := 0
 cl-lim := 20
 sub-lim := 1000
