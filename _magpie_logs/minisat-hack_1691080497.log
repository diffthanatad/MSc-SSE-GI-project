2023-08-03 17:35:00,302	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/test_10.sh
run_timeout = 5287
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-03 17:35:00,303	[INFO]	==== WARMUP ====
2023-08-03 18:58:18,821	[INFO]	WARM    SUCCESS               8210313882980           
2023-08-03 18:58:18,822	[INFO]	INITIAL SUCCESS               8210313882980           
2023-08-03 18:58:18,822	[INFO]	==== START: ValidTest ====
2023-08-03 18:58:18,981	[DEBUG]	CLEAN_PATCH: StmtReplacement(('core/Solver.cc.xml', 'stmt', 115), ('core/Solver.cc.xml', 'stmt', 395)) | ParamSetting(('minisat.params', 'rcheck'), 'True') | ParamSetting(('minisat.params', 'cp-increase'), 5436) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 611), ('core/Solver.cc.xml', 'stmt', 404)) | ParamSetting(('minisat.params', 'gc-frac'), 0.7083989409781926) | ParamSetting(('minisat.params', 'sub-lim'), 0) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 74), ('core/Solver.cc.xml', 'stmt', 300)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 40)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 151))
2023-08-03 18:58:18,982	[DEBUG]	CLEAN_SIZE: 10 (was 10)
2023-08-03 20:17:35,142	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 115), ('core/Solver.cc.xml', 'stmt', 395)) | ParamSetting(('minisat.params', 'rcheck'), 'True') | ParamSetting(('minisat.params', 'cp-increase'), 5436) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 611), ('core/Solver.cc.xml', 'stmt', 404)) | ParamSetting(('minisat.params', 'gc-frac'), 0.7083989409781926) | ParamSetting(('minisat.params', 'sub-lim'), 0) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 74), ('core/Solver.cc.xml', 'stmt', 300)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 40)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 151))
2023-08-03 20:17:35,143	[INFO]	1       SUCCESS              *7399138390255 (90.12%) [10 edit(s)] 
2023-08-03 20:17:35,160	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -160,7 +160,7 @@
 }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    
 
     /*vec<Lit>    oc;
     oc.clear();*/
@@ -235,7 +235,7 @@
 
     if (c.learnt())/*auto*/{ learnts_literals -= c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals -= c.size();
+    else/*auto*/{            int         backtrack_level;
 }/*auto*/ }
 
 
@@ -346,7 +346,7 @@
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
+            printf("c ============================[ Search Statistics ]==============================\n");
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -406,7 +406,7 @@
             Var x = var(out_learnt[i]);
 
             if (reason(x) == CRef_Undef)/*auto*/{
-                out_learnt[j++] = out_learnt[i];
+                
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -1044,6 +1044,7 @@
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
+            break;
             for (int j = 0; j < c.size(); j++)/*auto*/{
                 if (value(c[j]) != l_False)/*auto*/{
                     mapVar(var(c[j]), map, max);
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5
 lbd-cut-max := 10
-cp-increase := 15000
+cp-increase := 5436
 core-tolerance := 0.02
 R-val := 1.4
 var-decay := 0.8
@@ -10,13 +10,13 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.7083989409781926
 verb := '1'
 pre := 'True'
 asymm := 'False'
-rcheck := 'False'
+rcheck := 'True'
 elim := 'True'
 grow := 0
 cl-lim := 20
-sub-lim := 1000
+sub-lim := 0
 simp-gc-frac := 0.5

2023-08-03 20:17:35,175	[INFO]	==== END ====
2023-08-03 20:17:35,176	[INFO]	Reason: validation end
2023-08-03 20:17:35,176	[INFO]	
2023-08-03 20:17:35,176	[INFO]	==== REPORT ====
2023-08-03 20:17:35,176	[INFO]	Termination: validation end
2023-08-03 20:17:35,176	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691080497.log
2023-08-03 20:17:35,192	[INFO]	Patch file: _magpie_logs/minisat-hack_1691080497.patch
2023-08-03 20:17:35,192	[INFO]	Diff file: _magpie_logs/minisat-hack_1691080497.diff
2023-08-03 20:17:35,192	[INFO]	Best fitness: 7399138390255
2023-08-03 20:17:35,192	[INFO]	Best patch: StmtReplacement(('core/Solver.cc.xml', 'stmt', 115), ('core/Solver.cc.xml', 'stmt', 395)) | ParamSetting(('minisat.params', 'rcheck'), 'True') | ParamSetting(('minisat.params', 'cp-increase'), 5436) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 611), ('core/Solver.cc.xml', 'stmt', 404)) | ParamSetting(('minisat.params', 'gc-frac'), 0.7083989409781926) | ParamSetting(('minisat.params', 'sub-lim'), 0) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 74), ('core/Solver.cc.xml', 'stmt', 300)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 40)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 151))
2023-08-03 20:17:35,192	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -160,7 +160,7 @@
 }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    
 
     /*vec<Lit>    oc;
     oc.clear();*/
@@ -235,7 +235,7 @@
 
     if (c.learnt())/*auto*/{ learnts_literals -= c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals -= c.size();
+    else/*auto*/{            int         backtrack_level;
 }/*auto*/ }
 
 
@@ -346,7 +346,7 @@
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
+            printf("c ============================[ Search Statistics ]==============================\n");
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -406,7 +406,7 @@
             Var x = var(out_learnt[i]);
 
             if (reason(x) == CRef_Undef)/*auto*/{
-                out_learnt[j++] = out_learnt[i];
+                
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -1044,6 +1044,7 @@
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
+            break;
             for (int j = 0; j < c.size(); j++)/*auto*/{
                 if (value(c[j]) != l_False)/*auto*/{
                     mapVar(var(c[j]), map, max);
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5
 lbd-cut-max := 10
-cp-increase := 15000
+cp-increase := 5436
 core-tolerance := 0.02
 R-val := 1.4
 var-decay := 0.8
@@ -10,13 +10,13 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.7083989409781926
 verb := '1'
 pre := 'True'
 asymm := 'False'
-rcheck := 'False'
+rcheck := 'True'
 elim := 'True'
 grow := 0
 cl-lim := 20
-sub-lim := 1000
+sub-lim := 0
 simp-gc-frac := 0.5

