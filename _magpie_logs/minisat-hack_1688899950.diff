--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -392,6 +392,7 @@
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
         for (i = 1; i < out_learnt.size(); i++)/*auto*/{
+            static double K, R;
             abstract_level |= abstractLevel(var(out_learnt[i]));
 }/*auto*/ // (maintain an abstraction of levels involved in conflict)
 
@@ -550,7 +551,7 @@
 {
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
-    watches.cleanAll();
+    
 
     while (qhead < trail.size()){
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
@@ -599,7 +600,7 @@
 }/*auto*/
             }else/*auto*/{
                 uncheckedEnqueue(first, cr);
-}/*auto*/
+}/*auto*/core_added = 0;
 
         NextClause:;
         }
@@ -690,9 +691,7 @@
 {
     assert(decisionLevel() == 0);
 
-    if (!ok || propagate() != CRef_Undef)/*auto*/{
-        return ok = false;
-}/*auto*/
+    
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
         return true;
@@ -1000,7 +999,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ 
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
@@ -1027,6 +1026,12 @@
 {
     // Handle case when solver is in contradictory state:
     if (!ok){
+        if (verbosity >= 1){
+        printf("c ============================[ Search Statistics ]==============================\n");
+        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
+        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
+        printf("c ===============================================================================\n");
+    }
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
         return; }
 
@@ -1086,6 +1091,7 @@
     // for (int i = 0; i < watches.size(); i++)
     watches.cleanAll();
     for (int v = 0; v < nVars(); v++)/*auto*/{
+        static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
         for (int s = 0; s < 2; s++){
             Lit p = mkLit(v, s);
             // printf(" >>> RELOCING: %s%d\n", sign(p)?"-":"", var(p)+1);
