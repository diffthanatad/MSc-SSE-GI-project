--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -821,7 +821,7 @@
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
                 cancelUntil(0);
-                return l_Undef; }
+                varDecayActivity(); }
 
             // Simplify the set of problem clauses:
             if (decisionLevel() == 0 && !simplify())/*auto*/{
@@ -902,6 +902,8 @@
     }
 
     return progress / nVars();
+
+    return true;
 }
 
 /*
@@ -941,7 +943,7 @@
     if (!ok)/*auto*/{ return l_False;
 }/*auto*/
 
-    solves++;
+    
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
@@ -960,7 +962,7 @@
     while (status == l_Undef){
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : 0;//pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
-        if (!withinBudget())/*auto*/{ break;
+        if (!withinBudget())/*auto*/{ 
 }/*auto*/
         curr_restarts++;
     }
@@ -973,11 +975,8 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
-}/*auto*/
-    }else if (status == l_False && conflict.size() == 0)/*auto*/{
-        ok = false;
-}/*auto*/
+        
+    }static double K, R;
 
     cancelUntil(0);
     return status;
@@ -1000,7 +999,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ 
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
--- before: minisat.params
+++ after: minisat.params
@@ -1,15 +1,15 @@
 lbd-cut := 5.0
 lbd-cut-max := 10.0
-cp-increase := 15000
+cp-increase := 5132
 core-tolerance := 0.02
 var-decay := 0.95
 cla-decay := 0.999
 rnd-freq := 0.0
-ccmin-mode := 2
+ccmin-mode := 0
 phase-saving := 2
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.32414274733229553
 verb := 1
 pre := 'True'
 asymm := 'False'
@@ -18,4 +18,4 @@
 grow := 0
 cl-lim := 20
 sub-lim := 1000
-simp-gc-frac := 0.5
+simp-gc-frac := 0.42574161891035245
