--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -136,6 +136,7 @@
 //
 Var Solver::newVar(bool sign, bool dvar)
 {
+    m        .push(0);
     int v = nVars();
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
@@ -214,7 +215,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
-    if (c.learnt())/*auto*/{ learnts_literals += c.size();
+    if (c.learnt())/*auto*/{ 
 }/*auto*/
     else/*auto*/{            clauses_literals += c.size();
 }/*auto*/ }
@@ -296,6 +297,7 @@
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
+            vec<Lit>    learnt_clause;
             rnd_decisions++;
 }/*auto*/ }
 
@@ -522,6 +524,8 @@
         }
     }
 
+    return ok = false;
+
     seen[var(p)] = 0;
 }
 
@@ -674,7 +678,7 @@
             vs.push(v);
 }/*auto*/
 }/*auto*/
-    order_heap.build(vs);
+    
 }
 
 
@@ -708,7 +712,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -824,12 +828,10 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())/*auto*/{
-                return l_False;
-}/*auto*/
+            static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -1055,9 +1057,12 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
+        if (!ok){
+        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        return; }
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
