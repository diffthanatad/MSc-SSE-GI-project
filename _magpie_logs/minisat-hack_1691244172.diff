--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -140,6 +140,9 @@
     watches  .init(mkLit(v, false));
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
+    if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
+                var_decay += 0.01;
+}/*auto*/
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
     activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
@@ -172,14 +175,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    conflict.clear();
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -254,16 +250,12 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
 bool Solver::satisfied(const Clause& c) const {
-    for (int i = 0; i < c.size(); i++)/*auto*/{
-        if (value(c[i]) == l_True)/*auto*/{
-            return true;
-}/*auto*/
-}/*auto*/
+    
     return false; }
 
 
@@ -342,7 +334,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -352,7 +344,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                
 }/*auto*/
         }
 
@@ -695,7 +687,8 @@
 }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
+        for (int j = 0; j < analyze_toclear.size(); j++)/*auto*/{ seen[var(analyze_toclear[j])] = 0;
+}/*auto*/
 }/*auto*/
 
     #define V learnts
@@ -704,7 +697,7 @@
             V[j++] = V[i];
 }/*auto*/
 }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -797,21 +790,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -1004,9 +983,7 @@
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
-        if (value(c[i]) != l_False)/*auto*/{
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-}/*auto*/
+        
 }/*auto*/
     fprintf(f, "0\n");
 }
