--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -214,7 +214,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
-    if (c.learnt())/*auto*/{ learnts_literals += c.size();
+    if (c.learnt())/*auto*/{ Var next = var_Undef;
 }/*auto*/
     else/*auto*/{            clauses_literals += c.size();
 }/*auto*/ }
@@ -410,11 +410,7 @@
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-}/*auto*/
+                
             }
         }
     }else/*auto*/{
@@ -571,7 +567,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            num_props++;
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -606,7 +602,7 @@
         ws.shrink(i - j);
     }
     propagations += num_props;
-    simpDB_props -= num_props;
+    
 
     return confl;
 }
@@ -763,11 +759,13 @@
             }
 
             learnt_clause.clear();
+
+            i++;
             analyze(confl, learnt_clause, backtrack_level);
             cancelUntil(backtrack_level);
 
             if (!luby_restart){
-                gS += L;
+                
                 PUSH(LQ, L, 50, lS);
             }
 
@@ -793,7 +791,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -973,7 +971,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
+        for (int i = 0; i < nVars(); i++)/*auto*/{ 
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;
