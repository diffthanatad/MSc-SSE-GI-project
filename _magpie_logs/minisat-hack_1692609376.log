2023-08-21 10:16:19,421	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_2.sh
run_timeout = 1565
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 100
elitism_size = 10
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-21 10:16:19,421	[INFO]	==== WARMUP ====
2023-08-21 10:33:17,495	[INFO]	WARM    SUCCESS               1818707713538           
2023-08-21 10:33:17,495	[INFO]	INITIAL SUCCESS               1818707713538           
2023-08-21 10:33:17,495	[INFO]	==== START: ValidTest ====
2023-08-21 10:33:17,618	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 295)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 440)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 307)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 43)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 334), ('core/Solver.cc.xml', 'stmt', 319)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 473)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112))
2023-08-21 10:33:17,618	[DEBUG]	CLEAN_SIZE: 8 (was 9)
2023-08-21 10:51:37,682	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 295)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 440)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 307)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 43)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 334), ('core/Solver.cc.xml', 'stmt', 319)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 473)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112))
2023-08-21 10:51:37,683	[INFO]	1       SUCCESS              *2047317644528 (112.57%) [8 edit(s)] 
2023-08-21 10:51:37,697	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -172,14 +172,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -342,7 +335,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -713,7 +706,7 @@
         removeSatisfied(clauses);
 }/*auto*/
     checkGarbage();
-    rebuildOrderHeap();
+    
 
     simpDB_assigns = nAssigns();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
@@ -748,7 +741,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+             conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 var_decay += 0.01;
 }/*auto*/
@@ -794,24 +787,10 @@
             }*/
 
             varDecayActivity();
-            claDecayActivity();
+            cancelUntil(backtrack_level);
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -1041,16 +1020,7 @@
 }/*auto*/
 }/*auto*/
         
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-                if (value(c[j]) != l_False)/*auto*/{
-                    mapVar(var(c[j]), map, max);
-}/*auto*/
-}/*auto*/
-        }
-}/*auto*/
+    
 
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
@@ -1126,7 +1096,7 @@
     // is not precise but should avoid some unnecessary reallocations for the new region:
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
-    relocAll(to);
+    
     if (verbosity >= 2)/*auto*/{
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);

2023-08-21 10:51:37,710	[INFO]	==== END ====
2023-08-21 10:51:37,710	[INFO]	Reason: validation end
2023-08-21 10:51:37,710	[INFO]	
2023-08-21 10:51:37,710	[INFO]	==== REPORT ====
2023-08-21 10:51:37,710	[INFO]	Termination: validation end
2023-08-21 10:51:37,710	[INFO]	Log file: /cs/research/crest/home0/jpetke/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1692609376.log
2023-08-21 10:51:37,723	[INFO]	Patch file: _magpie_logs/minisat-hack_1692609376.patch
2023-08-21 10:51:37,723	[INFO]	Diff file: _magpie_logs/minisat-hack_1692609376.diff
2023-08-21 10:51:37,723	[INFO]	Best fitness: 2047317644528
2023-08-21 10:51:37,723	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 295)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 440)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 307)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 335)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 43)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 334), ('core/Solver.cc.xml', 'stmt', 319)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 473)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112))
2023-08-21 10:51:37,723	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -172,14 +172,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -342,7 +335,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -713,7 +706,7 @@
         removeSatisfied(clauses);
 }/*auto*/
     checkGarbage();
-    rebuildOrderHeap();
+    
 
     simpDB_assigns = nAssigns();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
@@ -748,7 +741,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+             conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 var_decay += 0.01;
 }/*auto*/
@@ -794,24 +787,10 @@
             }*/
 
             varDecayActivity();
-            claDecayActivity();
+            cancelUntil(backtrack_level);
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
@@ -1041,16 +1020,7 @@
 }/*auto*/
 }/*auto*/
         
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-                if (value(c[j]) != l_False)/*auto*/{
-                    mapVar(var(c[j]), map, max);
-}/*auto*/
-}/*auto*/
-        }
-}/*auto*/
+    
 
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
@@ -1126,7 +1096,7 @@
     // is not precise but should avoid some unnecessary reallocations for the new region:
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
-    relocAll(to);
+    
     if (verbosity >= 2)/*auto*/{
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);

