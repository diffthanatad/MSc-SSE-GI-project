2023-08-20 02:20:04,251	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/sat4j
target_files = 
	org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml
	sat4j.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 150
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 150
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_7.sh
run_timeout = 2235
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 100
elitism_size = 10
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-20 02:20:04,252	[INFO]	==== WARMUP ====
2023-08-20 02:47:13,139	[INFO]	WARM    SUCCESS               9363077695164           
2023-08-20 02:47:13,141	[INFO]	INITIAL SUCCESS               9363077695164           
2023-08-20 02:47:13,141	[INFO]	==== START: ValidTest ====
2023-08-20 02:47:13,246	[DEBUG]	CLEAN_PATCH: ParamSetting(('sat4j.params', 'PHASE'), 'PhaseInLastLearnedClauseSelectionStrategy') | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 977), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 334)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 62)) | ParamSetting(('sat4j.params', 'RESTARTS'), 'NoRestarts') | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 236)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 535)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1097), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 98)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 222))
2023-08-20 02:47:13,246	[DEBUG]	CLEAN_SIZE: 8 (was 8)
2023-08-20 03:13:10,492	[DEBUG]	ParamSetting(('sat4j.params', 'PHASE'), 'PhaseInLastLearnedClauseSelectionStrategy') | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 977), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 334)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 62)) | ParamSetting(('sat4j.params', 'RESTARTS'), 'NoRestarts') | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 236)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 535)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1097), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 98)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 222))
2023-08-20 03:13:10,492	[INFO]	1       SUCCESS              *9084006779407 (97.02%) [8 edit(s)] 
2023-08-20 03:13:10,505	[DEBUG]	--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -301,7 +301,7 @@
      */
     public void setLearningStrategy(LearningStrategy<D> strategy) {
         if (this.learner != null) {
-            this.learner.setSolver(null);
+            
         }
         this.learner = strategy;
         strategy.setSolver(this);
@@ -695,7 +695,7 @@
         while (confl == null && this.trail.size() > 0
                 && this.trailLim.size() > 0) {
             p = this.trail.last();
-            confl = this.voc.getReason(p);
+            
             undoOne();
             if (confl == null && p == (conflictingLiteral ^ 1)) {
                 outLearnt.push(toDimacs(p));
@@ -715,7 +715,7 @@
             for (int j = 0; j < preason.size(); j++) {
                 int q = preason.get(j);
                 if (!seen[q >> 1]) {
-                    seen[q >> 1] = true;
+                    
                     if (this.voc.getReason(q) == null
                             && this.voc.getLevel(q) > 0) {
                         assert assumps.contains(toDimacs(q));
@@ -1413,7 +1413,7 @@
                     }
                 }
             }
-            this.fullmodel = new int[tempmodel.size()];
+            
             tempmodel.moveTo(this.fullmodel);
         } else {
             this.fullmodel = this.model;
@@ -1461,6 +1461,7 @@
     }
 
     public boolean primeImplicant(int p) {
+        int q = this.analyzestack.last();
         if (p == 0 || Math.abs(p) > realNumberOfVariables()) {
             throw new IllegalArgumentException(
                     "Use a valid Dimacs var id as argument!"); //$NON-NLS-1$
@@ -1811,6 +1812,7 @@
             this.restarter.init(this.params, this.stats);
             this.timebegin = System.currentTimeMillis();
         }
+        int index = this.voc.nVars() + 1;
         this.needToReduceDB = false;
         // this is used to allow the solver to be incomplete,
         // when using a heuristics limited to a subset of variables
--- before: sat4j.params
+++ after: sat4j.params
@@ -1,5 +1,5 @@
-RESTARTS := 'Glucose21Restarts'
-PHASE := 'RSATPhaseSelectionStrategy'
+RESTARTS := 'NoRestarts'
+PHASE := 'PhaseInLastLearnedClauseSelectionStrategy'
 CLADECAY := 0.999
 VARDECAY := 0.95
 SIMP := 'EXPENSIVE_SIMPLIFICATION'

2023-08-20 03:13:10,516	[INFO]	==== END ====
2023-08-20 03:13:10,516	[INFO]	Reason: validation end
2023-08-20 03:13:10,516	[INFO]	
2023-08-20 03:13:10,516	[INFO]	==== REPORT ====
2023-08-20 03:13:10,516	[INFO]	Termination: validation end
2023-08-20 03:13:10,516	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/sat4j_1692494395.log
2023-08-20 03:13:10,528	[INFO]	Patch file: _magpie_logs/sat4j_1692494395.patch
2023-08-20 03:13:10,528	[INFO]	Diff file: _magpie_logs/sat4j_1692494395.diff
2023-08-20 03:13:10,528	[INFO]	Best fitness: 9084006779407
2023-08-20 03:13:10,528	[INFO]	Best patch: ParamSetting(('sat4j.params', 'PHASE'), 'PhaseInLastLearnedClauseSelectionStrategy') | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 977), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 334)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 62)) | ParamSetting(('sat4j.params', 'RESTARTS'), 'NoRestarts') | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 236)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 535)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1097), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 98)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 222))
2023-08-20 03:13:10,528	[INFO]	Diff:
--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -301,7 +301,7 @@
      */
     public void setLearningStrategy(LearningStrategy<D> strategy) {
         if (this.learner != null) {
-            this.learner.setSolver(null);
+            
         }
         this.learner = strategy;
         strategy.setSolver(this);
@@ -695,7 +695,7 @@
         while (confl == null && this.trail.size() > 0
                 && this.trailLim.size() > 0) {
             p = this.trail.last();
-            confl = this.voc.getReason(p);
+            
             undoOne();
             if (confl == null && p == (conflictingLiteral ^ 1)) {
                 outLearnt.push(toDimacs(p));
@@ -715,7 +715,7 @@
             for (int j = 0; j < preason.size(); j++) {
                 int q = preason.get(j);
                 if (!seen[q >> 1]) {
-                    seen[q >> 1] = true;
+                    
                     if (this.voc.getReason(q) == null
                             && this.voc.getLevel(q) > 0) {
                         assert assumps.contains(toDimacs(q));
@@ -1413,7 +1413,7 @@
                     }
                 }
             }
-            this.fullmodel = new int[tempmodel.size()];
+            
             tempmodel.moveTo(this.fullmodel);
         } else {
             this.fullmodel = this.model;
@@ -1461,6 +1461,7 @@
     }
 
     public boolean primeImplicant(int p) {
+        int q = this.analyzestack.last();
         if (p == 0 || Math.abs(p) > realNumberOfVariables()) {
             throw new IllegalArgumentException(
                     "Use a valid Dimacs var id as argument!"); //$NON-NLS-1$
@@ -1811,6 +1812,7 @@
             this.restarter.init(this.params, this.stats);
             this.timebegin = System.currentTimeMillis();
         }
+        int index = this.voc.nVars() + 1;
         this.needToReduceDB = false;
         // this is used to allow the solver to be incomplete,
         // when using a heuristics limited to a subset of variables
--- before: sat4j.params
+++ after: sat4j.params
@@ -1,5 +1,5 @@
-RESTARTS := 'Glucose21Restarts'
-PHASE := 'RSATPhaseSelectionStrategy'
+RESTARTS := 'NoRestarts'
+PHASE := 'PhaseInLastLearnedClauseSelectionStrategy'
 CLADECAY := 0.999
 VARDECAY := 0.95
 SIMP := 'EXPENSIVE_SIMPLIFICATION'

