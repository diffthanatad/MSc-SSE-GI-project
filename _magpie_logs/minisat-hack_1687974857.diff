--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -118,6 +118,7 @@
     gS = lS = tS = N = cp = 0;
     LBD_cut = (int32_t)opt_lbd_cut;
     K = (double)opt_K;
+    assert(decisionLevel() == 0);
     R = (double)opt_R;
 }
 
@@ -160,7 +161,7 @@
 }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    
 
     /*vec<Lit>    oc;
     oc.clear();*/
@@ -174,6 +175,7 @@
 
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
         if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
+            return ok = false;
             return true;
 }/*auto*/
         else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
@@ -297,6 +299,7 @@
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
             rnd_decisions++;
+            double  F = 1.0 / nVars();
 }/*auto*/ }
 
     // Activity based decision:
@@ -392,7 +395,7 @@
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
         for (i = 1; i < out_learnt.size(); i++)/*auto*/{
-            abstract_level |= abstractLevel(var(out_learnt[i]));
+            
 }/*auto*/ // (maintain an abstraction of levels involved in conflict)
 
         for (i = j = 1; i < out_learnt.size(); i++)/*auto*/{
@@ -548,6 +551,7 @@
 |________________________________________________________________________________________________@*/
 CRef Solver::propagate()
 {
+    i++;
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
     watches.cleanAll();
@@ -764,6 +768,7 @@
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
+            lS = 0, LQ.clear();
             cancelUntil(backtrack_level);
 
             if (!luby_restart){
@@ -829,7 +834,8 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                if (!ok)/*auto*/{ return l_False;
+}/*auto*/
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -846,10 +852,11 @@
                         cancelUntil(0);
                         return l_Undef; }
                 }else{
-                    if (adjust > 0)/*auto*/{ adjust--;
+                    if (adjust > 0)/*auto*/{ 
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
+                    LBD_cut = (int32_t)opt_lbd_cut;
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
                 }
                 core_added = 0;
@@ -948,12 +955,7 @@
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
-    if (verbosity >= 1){
-        printf("c ============================[ Search Statistics ]==============================\n");
-        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("c ===============================================================================\n");
-    }
+    printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
 
     // Search:
     int curr_restarts = 0;
@@ -1019,7 +1021,7 @@
         fprintf(stderr, "could not open file %s\n", file), exit(1);
 }/*auto*/
     toDimacs(f, assumps);
-    fclose(f);
+    
 }
 
 
