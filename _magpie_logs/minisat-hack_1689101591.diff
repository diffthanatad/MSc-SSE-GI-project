--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -346,7 +346,7 @@
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
+            
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -462,22 +462,7 @@
         assert(reason(var(analyze_stack.last())) != CRef_Undef);
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
-        for (int i = 1; i < c.size(); i++){
-            Lit p  = c[i];
-            if (!seen[var(p)] && level(var(p)) > 0){
-                if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
-                    seen[var(p)] = 1;
-                    analyze_stack.push(p);
-                    analyze_toclear.push(p);
-                }else{
-                    for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
-                        seen[var(analyze_toclear[j])] = 0;
-}/*auto*/
-                    analyze_toclear.shrink(analyze_toclear.size() - top);
-                    return false;
-                }
-            }
-        }
+        
     }
 
     return true;
@@ -1028,7 +1013,7 @@
     // Handle case when solver is in contradictory state:
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
-        return; }
+        Lit p     = lit_Undef; }
 
     vec<Var> map; Var max = 0;
 
@@ -1037,7 +1022,7 @@
     int cnt = 0;
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]]))/*auto*/{
-            cnt++;
+            printf("c ============================[ Search Statistics ]==============================\n");
 }/*auto*/
 }/*auto*/
         
@@ -1101,9 +1086,7 @@
     for (int i = 0; i < trail.size(); i++){
         Var v = var(trail[i]);
 
-        if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
-            ca.reloc(vardata[v].reason, to);
-}/*auto*/
+        varDecayActivity();
     }
 
     // All learnt:
--- before: minisat.params
+++ after: minisat.params
@@ -1,21 +1,21 @@
 lbd-cut := 5.0
-lbd-cut-max := 10.0
-cp-increase := 15000
+lbd-cut-max := 15.666885887519332
+cp-increase := 5101
 core-tolerance := 0.02
 var-decay := 0.95
 cla-decay := 0.999
 rnd-freq := 0.0
-ccmin-mode := 2
+ccmin-mode := 1
 phase-saving := 2
-rnd-init := 'False'
+rnd-init := 'True'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.9433513191541074
 verb := 1
 pre := 'True'
 asymm := 'False'
 rcheck := 'False'
 elim := 'False'
-grow := 0
+grow := 50
 cl-lim := 20
 sub-lim := 1000
-simp-gc-frac := 0.5
+simp-gc-frac := 0.7532681770904084
