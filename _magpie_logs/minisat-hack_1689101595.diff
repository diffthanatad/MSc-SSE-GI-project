--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -172,14 +172,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
-}/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            ps[j++] = p = ps[i];
-}/*auto*/
-}/*auto*/
+    K = (double)opt_K;
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -715,7 +708,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    Var x = var(trail[i]);
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -793,7 +786,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            K = (double)opt_K;
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -944,7 +937,7 @@
     solves++;
 
     max_learnts               = nClauses() * learntsize_factor;
-    learntsize_adjust_confl   = learntsize_adjust_start_confl;
+    core_added = 0;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
--- before: minisat.params
+++ after: minisat.params
@@ -1,21 +1,21 @@
 lbd-cut := 5.0
 lbd-cut-max := 10.0
-cp-increase := 15000
-core-tolerance := 0.02
+cp-increase := 5359
+core-tolerance := 0.2931677025552385
 var-decay := 0.95
 cla-decay := 0.999
 rnd-freq := 0.0
-ccmin-mode := 2
+ccmin-mode := 1
 phase-saving := 2
 rnd-init := 'False'
 luby := 0
 gc-frac := 0.2
-verb := 1
+verb := 0
 pre := 'True'
 asymm := 'False'
 rcheck := 'False'
 elim := 'False'
-grow := 0
+grow := -546
 cl-lim := 20
 sub-lim := 1000
 simp-gc-frac := 0.5
