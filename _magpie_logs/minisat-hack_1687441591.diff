--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -10,7 +10,6 @@
 
 The above copyright notice and this permission notice shall be included in all copies or
 substantial portions of the Software.
-
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
@@ -22,7 +21,6 @@
 This is a patched version of Minisat 2.2. [Marijn Heule, April 17, 2013]
 
 The patch includes:
-- The output of the solver is modified following to the SAT Competition 2013 output requirements
 - The solver optionally emits a DRUP proof in the file speficied in argv[2]
 **************************************************************************************************/
 
@@ -223,7 +221,6 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
-        watches.smudge(~c[1]);
     }
 
     if (c.learnt()) learnts_literals -= c.size();
@@ -330,7 +327,6 @@
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -487,7 +483,6 @@
             seen[x] = 0;
         }
     }
-
     seen[var(p)] = 0;
 }
 
@@ -536,7 +531,7 @@
             Lit      false_lit = ~p;
             if (c[0] == false_lit)
                 c[0] = c[1], c[1] = false_lit;
-            assert(c[1] == false_lit);
+
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -715,6 +710,7 @@
             cancelUntil(backtrack_level);
 
             if (!luby_restart){
+        int end = i == decisionLevel() ? trail.size() : trail_lim[i];
                 gS += L;
                 PUSH(LQ, L, 50, lS);
             }
