2023-08-22 18:43:30,391	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/sat4j
target_files = 
	org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml
	sat4j.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 150
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 150
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_6.sh
run_timeout = 2280
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidRankingSimplify
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
	ParamSetting
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 100
elitism_size = 10
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-22 18:43:30,392	[INFO]	==== WARMUP ====
2023-08-22 19:10:12,831	[INFO]	WARM    SUCCESS               9282060690713           
2023-08-22 19:10:12,831	[INFO]	INITIAL SUCCESS               9282060690713           
2023-08-22 19:10:12,831	[INFO]	==== START: ValidTest ====
2023-08-22 19:10:13,037	[DEBUG]	CLEAN_PATCH: StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1386), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 572)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 716)) | StmtReplacement(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 200), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 194)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 921), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 511)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 466)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1152), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 410)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 754)) | ParamSetting(('sat4j.params', 'SIMP'), 'NO_SIMPLIFICATION') | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 89), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 719))
2023-08-22 19:10:13,037	[DEBUG]	CLEAN_SIZE: 9 (was 10)
2023-08-22 19:42:27,274	[DEBUG]	StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1386), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 572)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 716)) | StmtReplacement(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 200), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 194)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 921), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 511)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 466)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1152), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 410)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 754)) | ParamSetting(('sat4j.params', 'SIMP'), 'NO_SIMPLIFICATION') | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 89), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 719))
2023-08-22 19:42:27,274	[INFO]	1       SUCCESS              *10880647710413 (117.22%) [9 edit(s)] 
2023-08-22 19:42:27,297	[DEBUG]	--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -639,7 +639,7 @@
         } while (--counter > 0);
 
         outLearnt.set(0, p ^ 1);
-        this.simplifier.simplify(outLearnt);
+        prevConfl = confl;
 
         Constr c = this.dsfactory.createUnregisteredClause(outLearnt);
         this.learnedConstraintsDeletionStrategy.onClauseLearning(c);
@@ -910,6 +910,7 @@
         conflictToReduce.shrink(i - j);
         this.stats.incReducedliterals(i - j);
     }
+    long total = 0;
 
     // Check if 'p' can be removed.' min_level' is used to abort early if
     // visiting literals at a level that cannot be removed.
@@ -1277,10 +1278,7 @@
                             }
                             if (allsat) {
                                 modelFound();
-                                this.slistener
-                                        .solutionFound((this.fullmodel != null)
-                                                ? this.fullmodel
-                                                : this.model, this);
+                                
                                 return Lbool.TRUE;
                             } else {
                                 confl = preventTheSameDecisionsToBeMade();
@@ -1380,6 +1378,7 @@
             if (this.voc.belongsToPool(i)) {
                 int p = this.voc.getFromPool(i);
                 if (!this.voc.isUnassigned(p)) {
+                    this.fullmodel = null;
                     tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
                     this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
                     reason = this.voc.getReason(p);
@@ -1769,6 +1768,10 @@
             this.conflictCount.add(this.restarter);
             this.conflictCount
                     .add(this.learnedConstraintsDeletionStrategy.getTimer());
+            while (this.trail.size() > learnedLiteralsLimit) {
+            this.learnedLiterals.push(this.trail.last());
+            undoOne();
+        }
         }
         boolean firstTimeGlobal = false;
         if (this.timeBasedTimeout) {
@@ -1855,7 +1858,7 @@
     }
 
     public void printInfos(PrintWriter out) {
-        printInfos(out, prefix);
+        
     }
 
     public void printInfos(PrintWriter out, String prefix) {
@@ -1945,7 +1948,7 @@
         this.constrs.clear();
         clearLearntClauses();
         this.voc.resetPool();
-        this.dsfactory.reset();
+        
         this.stats.reset();
         this.constrTypes.clear();
         this.undertimeout = true;
@@ -2161,6 +2164,7 @@
         IVecInt clause = new VecInt(decisions.size());
         if (realNumberOfVariables() > nVars()) {
             // we rely on the model projection in that case
+            this.claInc *= this.claDecay;
             for (int p : this.model) {
                 clause.push(-p);
             }
--- before: sat4j.params
+++ after: sat4j.params
@@ -2,5 +2,5 @@
 PHASE := 'RSATPhaseSelectionStrategy'
 CLADECAY := 0.999
 VARDECAY := 0.95
-SIMP := 'EXPENSIVE_SIMPLIFICATION'
+SIMP := 'NO_SIMPLIFICATION'
 CLEANING := 'LBD2'

2023-08-22 19:42:27,317	[INFO]	==== END ====
2023-08-22 19:42:27,317	[INFO]	Reason: validation end
2023-08-22 19:42:27,317	[INFO]	
2023-08-22 19:42:27,318	[INFO]	==== REPORT ====
2023-08-22 19:42:27,318	[INFO]	Termination: validation end
2023-08-22 19:42:27,318	[INFO]	Log file: /home/tsongpet/MSc-SSE-GI-project/_magpie_logs/sat4j_1692726205.log
2023-08-22 19:42:27,337	[INFO]	Patch file: _magpie_logs/sat4j_1692726205.patch
2023-08-22 19:42:27,338	[INFO]	Diff file: _magpie_logs/sat4j_1692726205.diff
2023-08-22 19:42:27,338	[INFO]	Best fitness: 10880647710413
2023-08-22 19:42:27,338	[INFO]	Best patch: StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1386), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 572)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 716)) | StmtReplacement(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 200), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 194)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 921), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 511)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 466)) | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 1152), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 410)) | StmtDeletion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 754)) | ParamSetting(('sat4j.params', 'SIMP'), 'NO_SIMPLIFICATION') | StmtInsertion(('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', '_inter_block', 89), ('org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java.xml', 'stmt', 719))
2023-08-22 19:42:27,338	[INFO]	Diff:
--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -639,7 +639,7 @@
         } while (--counter > 0);
 
         outLearnt.set(0, p ^ 1);
-        this.simplifier.simplify(outLearnt);
+        prevConfl = confl;
 
         Constr c = this.dsfactory.createUnregisteredClause(outLearnt);
         this.learnedConstraintsDeletionStrategy.onClauseLearning(c);
@@ -910,6 +910,7 @@
         conflictToReduce.shrink(i - j);
         this.stats.incReducedliterals(i - j);
     }
+    long total = 0;
 
     // Check if 'p' can be removed.' min_level' is used to abort early if
     // visiting literals at a level that cannot be removed.
@@ -1277,10 +1278,7 @@
                             }
                             if (allsat) {
                                 modelFound();
-                                this.slistener
-                                        .solutionFound((this.fullmodel != null)
-                                                ? this.fullmodel
-                                                : this.model, this);
+                                
                                 return Lbool.TRUE;
                             } else {
                                 confl = preventTheSameDecisionsToBeMade();
@@ -1380,6 +1378,7 @@
             if (this.voc.belongsToPool(i)) {
                 int p = this.voc.getFromPool(i);
                 if (!this.voc.isUnassigned(p)) {
+                    this.fullmodel = null;
                     tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
                     this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
                     reason = this.voc.getReason(p);
@@ -1769,6 +1768,10 @@
             this.conflictCount.add(this.restarter);
             this.conflictCount
                     .add(this.learnedConstraintsDeletionStrategy.getTimer());
+            while (this.trail.size() > learnedLiteralsLimit) {
+            this.learnedLiterals.push(this.trail.last());
+            undoOne();
+        }
         }
         boolean firstTimeGlobal = false;
         if (this.timeBasedTimeout) {
@@ -1855,7 +1858,7 @@
     }
 
     public void printInfos(PrintWriter out) {
-        printInfos(out, prefix);
+        
     }
 
     public void printInfos(PrintWriter out, String prefix) {
@@ -1945,7 +1948,7 @@
         this.constrs.clear();
         clearLearntClauses();
         this.voc.resetPool();
-        this.dsfactory.reset();
+        
         this.stats.reset();
         this.constrTypes.clear();
         this.undertimeout = true;
@@ -2161,6 +2164,7 @@
         IVecInt clause = new VecInt(decisions.size());
         if (realNumberOfVariables() > nVars()) {
             // we rely on the model projection in that case
+            this.claInc *= this.claDecay;
             for (int p : this.model) {
                 clause.push(-p);
             }
--- before: sat4j.params
+++ after: sat4j.params
@@ -2,5 +2,5 @@
 PHASE := 'RSATPhaseSelectionStrategy'
 CLADECAY := 0.999
 VARDECAY := 0.95
-SIMP := 'EXPENSIVE_SIMPLIFICATION'
+SIMP := 'NO_SIMPLIFICATION'
 CLEANING := 'LBD2'

