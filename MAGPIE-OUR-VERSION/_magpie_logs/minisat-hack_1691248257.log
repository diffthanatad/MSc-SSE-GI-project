2023-08-05 16:11:00,538	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_9.sh
run_timeout = 1593
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-05 16:11:00,539	[INFO]	==== WARMUP ====
2023-08-05 16:29:34,744	[INFO]	WARM    SUCCESS               1880747187986           
2023-08-05 16:29:34,745	[INFO]	INITIAL SUCCESS               1880747187986           
2023-08-05 16:29:34,745	[INFO]	==== START: ValidTest ====
2023-08-05 16:29:34,887	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 114)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 333), ('core/Solver.cc.xml', 'stmt', 32)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 221)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 257)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 178)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 361), ('core/Solver.cc.xml', 'stmt', 374)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 313)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 209))
2023-08-05 16:29:34,887	[DEBUG]	CLEAN_SIZE: 8 (was 8)
2023-08-05 16:45:30,096	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 114)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 333), ('core/Solver.cc.xml', 'stmt', 32)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 221)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 257)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 178)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 361), ('core/Solver.cc.xml', 'stmt', 374)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 313)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 209))
2023-08-05 16:45:30,098	[INFO]	1       SUCCESS              *1769463997547 (94.08%) [8 edit(s)] 
2023-08-05 16:45:30,118	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -459,7 +450,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -522,7 +513,7 @@
         }
     }
 
-    seen[var(p)] = 0;
+    
 }
 
 
@@ -556,7 +547,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -624,7 +615,7 @@
     ClauseAllocator& ca;
     reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
     bool operator () (CRef x, CRef y) { 
-        return /*ca[x].size() > 2 && (ca[y].size() == 2 ||*/ ca[x].activity() < ca[y].activity(); } 
+         } 
 };
 void Solver::reduceDB()
 {
@@ -755,12 +746,7 @@
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
 
-            if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
-            }
+            
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
@@ -793,7 +779,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            polarity .push(sign);
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -848,7 +834,7 @@
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
-                    if (adjust == 0)/*auto*/{ K = (double)opt_K;
+                    if (adjust == 0)/*auto*/{ int beg = i == 0 ? 0 : trail_lim[i - 1];
 }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
                 }

2023-08-05 16:45:30,134	[INFO]	==== END ====
2023-08-05 16:45:30,134	[INFO]	Reason: validation end
2023-08-05 16:45:30,134	[INFO]	
2023-08-05 16:45:30,134	[INFO]	==== REPORT ====
2023-08-05 16:45:30,134	[INFO]	Termination: validation end
2023-08-05 16:45:30,135	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691248257.log
2023-08-05 16:45:30,150	[INFO]	Patch file: _magpie_logs/minisat-hack_1691248257.patch
2023-08-05 16:45:30,150	[INFO]	Diff file: _magpie_logs/minisat-hack_1691248257.diff
2023-08-05 16:45:30,151	[INFO]	Best fitness: 1769463997547
2023-08-05 16:45:30,151	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 114)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 333), ('core/Solver.cc.xml', 'stmt', 32)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 221)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 257)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 178)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 361), ('core/Solver.cc.xml', 'stmt', 374)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 313)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 209))
2023-08-05 16:45:30,151	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -459,7 +450,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -522,7 +513,7 @@
         }
     }
 
-    seen[var(p)] = 0;
+    
 }
 
 
@@ -556,7 +547,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -624,7 +615,7 @@
     ClauseAllocator& ca;
     reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
     bool operator () (CRef x, CRef y) { 
-        return /*ca[x].size() > 2 && (ca[y].size() == 2 ||*/ ca[x].activity() < ca[y].activity(); } 
+         } 
 };
 void Solver::reduceDB()
 {
@@ -755,12 +746,7 @@
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
 
-            if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
-            }
+            
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
@@ -793,7 +779,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            polarity .push(sign);
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -848,7 +834,7 @@
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
-                    if (adjust == 0)/*auto*/{ K = (double)opt_K;
+                    if (adjust == 0)/*auto*/{ int beg = i == 0 ? 0 : trail_lim[i - 1];
 }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
                 }

