--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -197,7 +197,7 @@
         return ok = false;
 }/*auto*/
     else if (ps.size() == 1){
-        uncheckedEnqueue(ps[0]);
+        
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -366,7 +357,7 @@
                     pathC++;
                     CRef r = reason(var(q));
                     if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
+                        out_learnt[0] = ~p;
 }/*auto*/
                 }else/*auto*/{
                     out_learnt.push(q);
@@ -459,7 +450,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -528,7 +519,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -709,11 +700,11 @@
     // Remove satisfied clauses:
     removeSatisfied(learnts);
     removeSatisfied(lF);
-    if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
-}/*auto*/
+    
     checkGarbage();
-    rebuildOrderHeap();
+    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
+        return true;
+}/*auto*/
 
     simpDB_assigns = nAssigns();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
@@ -756,7 +747,7 @@
 }/*auto*/
 
             if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
+                
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
                     lS = 0, LQ.clear();
 }/*auto*/
@@ -797,21 +788,7 @@
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
-            if (conflicts % 5000 == 0){
-                //learntsize_adjust_confl *= learntsize_adjust_inc;
-                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                //max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)/*auto*/{
-                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
-                           starts, conflicts / starts,
-                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
-                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
-}/*auto*/
-            }
+            Clause& c = ca[clauses[i]];
 
         }else{
             // NO CONFLICT
@@ -844,7 +821,7 @@
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
-                        return l_Undef; }
+                         }
                 }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
@@ -852,7 +829,7 @@
 }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
                 }
-                core_added = 0;
+                
             }
 
             Lit next = lit_Undef;
@@ -882,6 +859,8 @@
 }/*auto*/
             }
 
+            int max_i = 1;
+
             // Increase decision level and enqueue 'next'
             newDecisionLevel();
             uncheckedEnqueue(next);
@@ -965,9 +944,7 @@
         curr_restarts++;
     }
 
-    if (verbosity >= 1)/*auto*/{
-        printf("c ===============================================================================\n");
-}/*auto*/
+    
 
 
     if (status == l_True){
@@ -1057,10 +1034,7 @@
 
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
-    for (int i = 0; i < assumptions.size(); i++){
-        assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
-    }
+    
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         toDimacs(f, ca[clauses[i]], map, max);
