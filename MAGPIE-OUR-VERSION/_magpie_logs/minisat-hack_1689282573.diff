--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -399,24 +399,9 @@
             if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))/*auto*/{
                 out_learnt[j++] = out_learnt[i];
 }/*auto*/
+            Clause& c = ca[clauses[i]];
 }/*auto*/
         
-    }else if (ccmin_mode == 1){
-        for (i = j = 1; i < out_learnt.size(); i++){
-            Var x = var(out_learnt[i]);
-
-            if (reason(x) == CRef_Undef)/*auto*/{
-                out_learnt[j++] = out_learnt[i];
-}/*auto*/
-            else{
-                Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)/*auto*/{
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-}/*auto*/
-            }
-        }
     }else/*auto*/{
         i = j = out_learnt.size();
 }/*auto*/
@@ -758,7 +743,7 @@
             if (!luby_restart){
                 PUSH(TQ, trail.size(), 5000, tS);
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
+                    lF.push(confl);
 }/*auto*/
             }
 
@@ -793,7 +778,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            Lit next = lit_Undef;
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -846,7 +831,7 @@
                         cancelUntil(0);
                         return l_Undef; }
                 }else{
-                    if (adjust > 0)/*auto*/{ adjust--;
+                    if (adjust > 0)/*auto*/{ int end = i == decisionLevel() ? trail.size() : trail_lim[i];
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
 }/*auto*/
@@ -925,7 +910,7 @@
 }/*auto*/
 
     while (size-1 != x){
-        size = (size-1)>>1;
+        
         seq--;
         x = x % size;
     }
