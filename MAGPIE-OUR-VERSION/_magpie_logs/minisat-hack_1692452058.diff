--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -197,7 +197,7 @@
         return ok = false;
 }/*auto*/
     else if (ps.size() == 1){
-        uncheckedEnqueue(ps[0]);
+        
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -216,7 +216,7 @@
     watches[~c[1]].push(Watcher(cr, c[0]));
     if (c.learnt())/*auto*/{ learnts_literals += c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals += c.size();
+    else/*auto*/{            
 }/*auto*/ }
 
 
@@ -229,7 +229,7 @@
         remove(watches[~c[1]], Watcher(cr, c[0]));
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
-        watches.smudge(~c[0]);
+        
         watches.smudge(~c[1]);
     }
 
@@ -391,9 +391,7 @@
     out_learnt.copyTo(analyze_toclear);
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
-        for (i = 1; i < out_learnt.size(); i++)/*auto*/{
-            abstract_level |= abstractLevel(var(out_learnt[i]));
-}/*auto*/ // (maintain an abstraction of levels involved in conflict)
+         // (maintain an abstraction of levels involved in conflict)
 
         for (i = j = 1; i < out_learnt.size(); i++)/*auto*/{
             if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))/*auto*/{
@@ -433,6 +431,7 @@
         out_btlevel = 0;
 }/*auto*/
     else{
+        pathC++;
         int max_i = 1;
         // Find the first literal assigned at the next-highest level:
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
@@ -663,6 +662,7 @@
 }/*auto*/
     }
     cs.shrink(i - j);
+    learntsize_adjust_confl   = learntsize_adjust_start_confl;
 }
 
 
