--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -393,6 +393,7 @@
         uint32_t abstract_level = 0;
         for (i = 1; i < out_learnt.size(); i++)/*auto*/{
             abstract_level |= abstractLevel(var(out_learnt[i]));
+            LBD(out_learnt);
 }/*auto*/ // (maintain an abstraction of levels involved in conflict)
 
         for (i = j = 1; i < out_learnt.size(); i++)/*auto*/{
@@ -528,7 +529,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -631,7 +632,7 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+    
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -688,7 +689,7 @@
 |________________________________________________________________________________________________@*/
 bool Solver::simplify()
 {
-    assert(decisionLevel() == 0);
+    
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
         return ok = false;
@@ -873,6 +874,7 @@
 
             if (next == lit_Undef)*/{
                 // New variable decision:
+                claDecayActivity();
                 decisions++;
                 next = pickBranchLit();
 
@@ -1008,7 +1010,7 @@
             fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
 }/*auto*/
 }/*auto*/
-    fprintf(f, "0\n");
+    
 }
 
 
