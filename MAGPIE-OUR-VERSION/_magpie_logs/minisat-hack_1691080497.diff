--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -160,7 +160,7 @@
 }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    
 
     /*vec<Lit>    oc;
     oc.clear();*/
@@ -235,7 +235,7 @@
 
     if (c.learnt())/*auto*/{ learnts_literals -= c.size();
 }/*auto*/
-    else/*auto*/{            clauses_literals -= c.size();
+    else/*auto*/{            int         backtrack_level;
 }/*auto*/ }
 
 
@@ -346,7 +346,7 @@
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
-            LBD(c);
+            printf("c ============================[ Search Statistics ]==============================\n");
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
@@ -406,7 +406,7 @@
             Var x = var(out_learnt[i]);
 
             if (reason(x) == CRef_Undef)/*auto*/{
-                out_learnt[j++] = out_learnt[i];
+                
 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -1044,6 +1044,7 @@
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
+            break;
             for (int j = 0; j < c.size(); j++)/*auto*/{
                 if (value(c[j]) != l_False)/*auto*/{
                     mapVar(var(c[j]), map, max);
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5
 lbd-cut-max := 10
-cp-increase := 15000
+cp-increase := 5436
 core-tolerance := 0.02
 R-val := 1.4
 var-decay := 0.8
@@ -10,13 +10,13 @@
 phase-saving := '2'
 rnd-init := 'False'
 luby := 0
-gc-frac := 0.2
+gc-frac := 0.7083989409781926
 verb := '1'
 pre := 'True'
 asymm := 'False'
-rcheck := 'False'
+rcheck := 'True'
 elim := 'True'
 grow := 0
 cl-lim := 20
-sub-lim := 1000
+sub-lim := 0
 simp-gc-frac := 0.5
