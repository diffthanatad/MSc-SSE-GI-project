2023-08-05 16:12:15,972	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_4.sh
run_timeout = 1538
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-05 16:12:15,973	[INFO]	==== WARMUP ====
2023-08-05 16:29:51,175	[INFO]	WARM    SUCCESS               1766582494917           
2023-08-05 16:29:51,176	[INFO]	INITIAL SUCCESS               1766582494917           
2023-08-05 16:29:51,176	[INFO]	==== START: ValidTest ====
2023-08-05 16:29:51,292	[DEBUG]	CLEAN_PATCH: StmtReplacement(('core/Solver.cc.xml', 'stmt', 349), ('core/Solver.cc.xml', 'stmt', 320)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 294)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 315)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 232)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 410), ('core/Solver.cc.xml', 'stmt', 321)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 419)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 70), ('core/Solver.cc.xml', 'stmt', 20))
2023-08-05 16:29:51,292	[DEBUG]	CLEAN_SIZE: 7 (was 7)
2023-08-05 16:47:52,031	[DEBUG]	StmtReplacement(('core/Solver.cc.xml', 'stmt', 349), ('core/Solver.cc.xml', 'stmt', 320)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 294)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 315)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 232)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 410), ('core/Solver.cc.xml', 'stmt', 321)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 419)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 70), ('core/Solver.cc.xml', 'stmt', 20))
2023-08-05 16:47:52,032	[INFO]	1       SUCCESS              *1823397818198 (103.22%) [7 edit(s)] 
2023-08-05 16:47:52,053	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -227,6 +227,7 @@
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
         remove(watches[~c[1]], Watcher(cr, c[0]));
+        gS = lS = tS = N = cp = 0;
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
@@ -571,7 +572,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -712,7 +713,7 @@
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -757,9 +758,7 @@
 
             if (!luby_restart){
                 PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
+                
             }
 
             learnt_clause.clear();
@@ -834,18 +833,10 @@
                 reduceDB();
 
                 static int adjust = 0;
-                if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-}/*auto*/
-
-                    if (!luby_restart){
-                        core_added = 0;
-                        K = 1;
-                        lS = 0, LQ.clear();
-                        cancelUntil(0);
-                        return l_Undef; }
-                }else{
+                if (!luby_restart){
+                gS += L;
+                PUSH(LQ, L, 50, lS);
+            }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
@@ -973,8 +964,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
-}/*auto*/
+        gS += L;
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;
 }/*auto*/
@@ -994,7 +984,7 @@
         map.growTo(x+1, -1);
         map[x] = max++;
     }
-    return map[x];
+    
 }
 
 

2023-08-05 16:47:52,070	[INFO]	==== END ====
2023-08-05 16:47:52,071	[INFO]	Reason: validation end
2023-08-05 16:47:52,071	[INFO]	
2023-08-05 16:47:52,071	[INFO]	==== REPORT ====
2023-08-05 16:47:52,071	[INFO]	Termination: validation end
2023-08-05 16:47:52,071	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691248333.log
2023-08-05 16:47:52,087	[INFO]	Patch file: _magpie_logs/minisat-hack_1691248333.patch
2023-08-05 16:47:52,087	[INFO]	Diff file: _magpie_logs/minisat-hack_1691248333.diff
2023-08-05 16:47:52,088	[INFO]	Best fitness: 1823397818198
2023-08-05 16:47:52,088	[INFO]	Best patch: StmtReplacement(('core/Solver.cc.xml', 'stmt', 349), ('core/Solver.cc.xml', 'stmt', 320)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 294)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 315)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 232)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 410), ('core/Solver.cc.xml', 'stmt', 321)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 419)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 70), ('core/Solver.cc.xml', 'stmt', 20))
2023-08-05 16:47:52,088	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -227,6 +227,7 @@
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
         remove(watches[~c[1]], Watcher(cr, c[0]));
+        gS = lS = tS = N = cp = 0;
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
@@ -571,7 +572,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -712,7 +713,7 @@
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -757,9 +758,7 @@
 
             if (!luby_restart){
                 PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
+                
             }
 
             learnt_clause.clear();
@@ -834,18 +833,10 @@
                 reduceDB();
 
                 static int adjust = 0;
-                if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-}/*auto*/
-
-                    if (!luby_restart){
-                        core_added = 0;
-                        K = 1;
-                        lS = 0, LQ.clear();
-                        cancelUntil(0);
-                        return l_Undef; }
-                }else{
+                if (!luby_restart){
+                gS += L;
+                PUSH(LQ, L, 50, lS);
+            }else{
                     if (adjust > 0)/*auto*/{ adjust--;
 }/*auto*/
                     if (adjust == 0)/*auto*/{ K = (double)opt_K;
@@ -973,8 +964,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
-}/*auto*/
+        gS += L;
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;
 }/*auto*/
@@ -994,7 +984,7 @@
         map.growTo(x+1, -1);
         map[x] = max++;
     }
-    return map[x];
+    
 }
 
 

