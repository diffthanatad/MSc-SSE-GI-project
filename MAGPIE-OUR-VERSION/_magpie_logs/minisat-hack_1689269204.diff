--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -345,16 +345,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                claBumpActivity(c);
-}/*auto*/
-        }
+        lS = 0, LQ.clear();
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -504,23 +495,7 @@
 
     seen[var(p)] = 1;
 
-    for (int i = trail.size()-1; i >= trail_lim[0]; i--){
-        Var x = var(trail[i]);
-        if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
-}/*auto*/
-            }
-            seen[x] = 0;
-        }
-    }
+    R = (double)opt_R;
 
     seen[var(p)] = 0;
 }
@@ -571,7 +546,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            simpDB_props   = clauses_literals + learnts_literals;
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -694,9 +669,7 @@
         return ok = false;
 }/*auto*/
 
-    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))/*auto*/{
-        return true;
-}/*auto*/
+    
 
     #define V learnts
     for (i = j = 0; i < V.size(); i++)/*auto*/{
@@ -708,7 +681,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{        // Can be turned off.
         removeSatisfied(clauses);
 }/*auto*/
@@ -829,7 +802,9 @@
 }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                if (decisionLevel() == 0)/*auto*/{
+        return;
+}/*auto*/
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -976,7 +951,7 @@
         for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
-        ok = false;
+        
 }/*auto*/
 
     cancelUntil(0);
