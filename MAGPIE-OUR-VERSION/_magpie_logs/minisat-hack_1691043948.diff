--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -174,7 +174,7 @@
 
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
         if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            return true;
+            
 }/*auto*/
         else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
             ps[j++] = p = ps[i];
@@ -254,7 +254,7 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -879,6 +879,7 @@
                 if (next == lit_Undef)/*auto*/{
                     // Model found:
                     return l_True;
+                    analyze_stack.pop();
 }/*auto*/
             }
 
@@ -1028,7 +1029,7 @@
     // Handle case when solver is in contradictory state:
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
-        return; }
+        toDimacs(f, assumps); }
 
     vec<Var> map; Var max = 0;
 
@@ -1126,7 +1127,11 @@
     // is not precise but should avoid some unnecessary reallocations for the new region:
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
-    relocAll(to);
+    for (i = j = 0; i < V.size(); i++)/*auto*/{
+        if (ca[V[i]].mark() != 3)/*auto*/{
+            V[j++] = V[i];
+}/*auto*/
+}/*auto*/
     if (verbosity >= 2)/*auto*/{
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
--- before: minisat.params
+++ after: minisat.params
@@ -1,8 +1,8 @@
-lbd-cut := 5
+lbd-cut := 4
 lbd-cut-max := 10
 cp-increase := 15000
 core-tolerance := 0.02
-R-val := 1.4
+R-val := 2.4744695428115397
 var-decay := 0.8
 cla-decay := 0.999
 rnd-freq := 0.0
@@ -14,9 +14,9 @@
 verb := '1'
 pre := 'True'
 asymm := 'False'
-rcheck := 'False'
+rcheck := 'True'
 elim := 'True'
 grow := 0
 cl-lim := 20
-sub-lim := 1000
-simp-gc-frac := 0.5
+sub-lim := 17
+simp-gc-frac := 0.44490387450230673
