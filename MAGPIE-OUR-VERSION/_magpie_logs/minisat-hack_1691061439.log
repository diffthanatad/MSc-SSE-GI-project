2023-08-03 12:17:23,128	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_1.sh
run_timeout = 1582
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-03 12:17:23,129	[INFO]	==== WARMUP ====
2023-08-03 12:35:51,359	[INFO]	WARM    SUCCESS               1852581811532           
2023-08-03 12:35:51,360	[INFO]	INITIAL SUCCESS               1852581811532           
2023-08-03 12:35:51,360	[INFO]	==== START: ValidTest ====
2023-08-03 12:35:51,717	[DEBUG]	CLEAN_PATCH: StmtInsertion(('core/Solver.cc.xml', '_inter_block', 156), ('core/Solver.cc.xml', 'stmt', 296)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 178), ('core/Solver.cc.xml', 'stmt', 364)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 284), ('core/Solver.cc.xml', 'stmt', 315)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 394)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 427)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 130), ('core/Solver.cc.xml', 'stmt', 128)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 440)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 577), ('core/Solver.cc.xml', 'stmt', 375)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 313)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 330)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 112), ('core/Solver.cc.xml', 'stmt', 316)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 649), ('core/Solver.cc.xml', 'stmt', 316))
2023-08-03 12:35:51,717	[DEBUG]	CLEAN_SIZE: 12 (was 14)
2023-08-03 12:51:58,332	[DEBUG]	StmtInsertion(('core/Solver.cc.xml', '_inter_block', 156), ('core/Solver.cc.xml', 'stmt', 296)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 178), ('core/Solver.cc.xml', 'stmt', 364)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 284), ('core/Solver.cc.xml', 'stmt', 315)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 394)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 427)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 130), ('core/Solver.cc.xml', 'stmt', 128)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 440)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 577), ('core/Solver.cc.xml', 'stmt', 375)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 313)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 330)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 112), ('core/Solver.cc.xml', 'stmt', 316)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 649), ('core/Solver.cc.xml', 'stmt', 316))
2023-08-03 12:51:58,333	[INFO]	1       SUCCESS              *1609737667069 (86.89%) [12 edit(s)] 
2023-08-03 12:51:58,362	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -294,6 +294,7 @@
 
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
+        lS = 0, LQ.clear();
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
             rnd_decisions++;
@@ -348,6 +349,7 @@
         if (c.learnt() && c.mark() != 3){
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
+            simpDB_assigns = nAssigns();
             if (L < LBD_cut){
                 lF.push(confl);
                 core_added++;
@@ -366,7 +368,7 @@
                     pathC++;
                     CRef r = reason(var(q));
                     if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
+                        CRef r = reason(var(q));
 }/*auto*/
                 }else/*auto*/{
                     out_learnt.push(q);
@@ -459,7 +461,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        Lit next = lit_Undef;
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -550,6 +552,9 @@
 {
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
+    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                    lS = 0, LQ.clear();
+}/*auto*/
     watches.cleanAll();
 
     while (qhead < trail.size()){
@@ -755,12 +760,7 @@
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
 
-            if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
-            }
+            
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
@@ -779,7 +779,7 @@
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
-                    claBumpActivity(ca[cr]);
+                    
 }/*auto*/
                 else/*auto*/{
                     core_added++;
@@ -948,12 +948,7 @@
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
-    if (verbosity >= 1){
-        printf("c ============================[ Search Statistics ]==============================\n");
-        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("c ===============================================================================\n");
-    }
+    
 
     // Search:
     int curr_restarts = 0;
@@ -1000,7 +995,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ return;int end = i == decisionLevel() ? trail.size() : trail_lim[i];
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
@@ -1015,9 +1010,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)/*auto*/{
-        fprintf(stderr, "could not open file %s\n", file), exit(1);
-}/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
@@ -1041,16 +1034,7 @@
 }/*auto*/
 }/*auto*/
         
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-                if (value(c[j]) != l_False)/*auto*/{
-                    mapVar(var(c[j]), map, max);
-}/*auto*/
-}/*auto*/
-        }
-}/*auto*/
+    
 
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
@@ -1116,6 +1100,7 @@
     //
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         ca.reloc(clauses[i], to);
+        lS = 0, LQ.clear();
 }/*auto*/
 }
 

2023-08-03 12:51:58,388	[INFO]	==== END ====
2023-08-03 12:51:58,388	[INFO]	Reason: validation end
2023-08-03 12:51:58,389	[INFO]	
2023-08-03 12:51:58,389	[INFO]	==== REPORT ====
2023-08-03 12:51:58,389	[INFO]	Termination: validation end
2023-08-03 12:51:58,389	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691061439.log
2023-08-03 12:51:58,415	[INFO]	Patch file: _magpie_logs/minisat-hack_1691061439.patch
2023-08-03 12:51:58,415	[INFO]	Diff file: _magpie_logs/minisat-hack_1691061439.diff
2023-08-03 12:51:58,415	[INFO]	Best fitness: 1609737667069
2023-08-03 12:51:58,415	[INFO]	Best patch: StmtInsertion(('core/Solver.cc.xml', '_inter_block', 156), ('core/Solver.cc.xml', 'stmt', 296)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 178), ('core/Solver.cc.xml', 'stmt', 364)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 284), ('core/Solver.cc.xml', 'stmt', 315)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 394)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 427)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 130), ('core/Solver.cc.xml', 'stmt', 128)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 440)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 577), ('core/Solver.cc.xml', 'stmt', 375)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 313)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 330)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 112), ('core/Solver.cc.xml', 'stmt', 316)) | StmtInsertion(('core/Solver.cc.xml', '_inter_block', 649), ('core/Solver.cc.xml', 'stmt', 316))
2023-08-03 12:51:58,415	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -294,6 +294,7 @@
 
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
+        lS = 0, LQ.clear();
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
             rnd_decisions++;
@@ -348,6 +349,7 @@
         if (c.learnt() && c.mark() != 3){
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
+            simpDB_assigns = nAssigns();
             if (L < LBD_cut){
                 lF.push(confl);
                 core_added++;
@@ -366,7 +368,7 @@
                     pathC++;
                     CRef r = reason(var(q));
                     if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
+                        CRef r = reason(var(q));
 }/*auto*/
                 }else/*auto*/{
                     out_learnt.push(q);
@@ -459,7 +461,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        Lit next = lit_Undef;
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -550,6 +552,9 @@
 {
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
+    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                    lS = 0, LQ.clear();
+}/*auto*/
     watches.cleanAll();
 
     while (qhead < trail.size()){
@@ -755,12 +760,7 @@
             if (decisionLevel() == 0)/*auto*/{ return l_False;
 }/*auto*/
 
-            if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
-                if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
-                    lS = 0, LQ.clear();
-}/*auto*/
-            }
+            
 
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
@@ -779,7 +779,7 @@
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
-                    claBumpActivity(ca[cr]);
+                    
 }/*auto*/
                 else/*auto*/{
                     core_added++;
@@ -948,12 +948,7 @@
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
-    if (verbosity >= 1){
-        printf("c ============================[ Search Statistics ]==============================\n");
-        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("c ===============================================================================\n");
-    }
+    
 
     // Search:
     int curr_restarts = 0;
@@ -1000,7 +995,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ return;int end = i == decisionLevel() ? trail.size() : trail_lim[i];
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
@@ -1015,9 +1010,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)/*auto*/{
-        fprintf(stderr, "could not open file %s\n", file), exit(1);
-}/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
@@ -1041,16 +1034,7 @@
 }/*auto*/
 }/*auto*/
         
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-                if (value(c[j]) != l_False)/*auto*/{
-                    mapVar(var(c[j]), map, max);
-}/*auto*/
-}/*auto*/
-        }
-}/*auto*/
+    
 
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
@@ -1116,6 +1100,7 @@
     //
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         ca.reloc(clauses[i], to);
+        lS = 0, LQ.clear();
 }/*auto*/
 }
 

