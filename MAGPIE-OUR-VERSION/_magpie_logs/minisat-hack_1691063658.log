2023-08-03 12:54:21,217	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_5.sh
run_timeout = 1600
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-03 12:54:21,218	[INFO]	==== WARMUP ====
2023-08-03 13:13:06,039	[INFO]	WARM    SUCCESS               1879868951387           
2023-08-03 13:13:06,040	[INFO]	INITIAL SUCCESS               1879868951387           
2023-08-03 13:13:06,040	[INFO]	==== START: ValidTest ====
2023-08-03 13:13:06,232	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 232)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 59)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 221)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 84)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 326)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 450), ('core/Solver.cc.xml', 'stmt', 16)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 129)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 206)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 120), ('core/Solver.cc.xml', 'stmt', 334)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 268)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 98))
2023-08-03 13:13:06,232	[DEBUG]	CLEAN_SIZE: 11 (was 11)
2023-08-03 13:30:27,012	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 232)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 59)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 221)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 84)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 326)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 450), ('core/Solver.cc.xml', 'stmt', 16)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 129)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 206)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 120), ('core/Solver.cc.xml', 'stmt', 334)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 268)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 98))
2023-08-03 13:30:27,013	[INFO]	1       SUCCESS              *1717649309106 (91.37%) [11 edit(s)] 
2023-08-03 13:30:27,031	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -211,7 +211,7 @@
 
 void Solver::attachClause(CRef cr) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
     if (c.learnt())/*auto*/{ learnts_literals += c.size();
@@ -264,7 +264,7 @@
             return true;
 }/*auto*/
 }/*auto*/
-    return false; }
+     }
 
 
 // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
@@ -295,9 +295,7 @@
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])/*auto*/{
-            rnd_decisions++;
-}/*auto*/ }
+         }
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])/*auto*/{
@@ -352,7 +350,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                claDecayActivity();
 }/*auto*/
         }
 
@@ -365,9 +363,7 @@
                 if (level(var(q)) >= decisionLevel()){
                     pathC++;
                     CRef r = reason(var(q));
-                    if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
-}/*auto*/
+                    
                 }else/*auto*/{
                     out_learnt.push(q);
 }/*auto*/
@@ -513,9 +509,7 @@
             }else{
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
+                    
 }/*auto*/
             }
             seen[x] = 0;
@@ -556,7 +550,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -571,7 +565,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -646,7 +640,7 @@
 }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    
 }
 
 
@@ -775,7 +769,7 @@
                 uncheckedEnqueue(learnt_clause[0]);
             }else{
                 CRef cr = ca.alloc(learnt_clause, true);
-                ca[cr].mark(L <= LBD_cut ? 3 : 2);
+                
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
@@ -1059,7 +1053,7 @@
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        static IntOption     opt_luby_restart      (_cat, "luby",        "Use the Luby restart sequence", 0, IntRange(0, 1));
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{

2023-08-03 13:30:27,047	[INFO]	==== END ====
2023-08-03 13:30:27,047	[INFO]	Reason: validation end
2023-08-03 13:30:27,047	[INFO]	
2023-08-03 13:30:27,047	[INFO]	==== REPORT ====
2023-08-03 13:30:27,047	[INFO]	Termination: validation end
2023-08-03 13:30:27,047	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691063658.log
2023-08-03 13:30:27,063	[INFO]	Patch file: _magpie_logs/minisat-hack_1691063658.patch
2023-08-03 13:30:27,064	[INFO]	Diff file: _magpie_logs/minisat-hack_1691063658.diff
2023-08-03 13:30:27,064	[INFO]	Best fitness: 1717649309106
2023-08-03 13:30:27,064	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 232)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 59)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 221)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 84)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 326)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 450), ('core/Solver.cc.xml', 'stmt', 16)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 129)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 206)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 120), ('core/Solver.cc.xml', 'stmt', 334)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 268)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 98))
2023-08-03 13:30:27,064	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -211,7 +211,7 @@
 
 void Solver::attachClause(CRef cr) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
     if (c.learnt())/*auto*/{ learnts_literals += c.size();
@@ -264,7 +264,7 @@
             return true;
 }/*auto*/
 }/*auto*/
-    return false; }
+     }
 
 
 // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
@@ -295,9 +295,7 @@
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])/*auto*/{
-            rnd_decisions++;
-}/*auto*/ }
+         }
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])/*auto*/{
@@ -352,7 +350,7 @@
                 lF.push(confl);
                 core_added++;
             }else/*auto*/{
-                claBumpActivity(c);
+                claDecayActivity();
 }/*auto*/
         }
 
@@ -365,9 +363,7 @@
                 if (level(var(q)) >= decisionLevel()){
                     pathC++;
                     CRef r = reason(var(q));
-                    if (r != CRef_Undef && ca[r].mark() == 3)/*auto*/{
-                        varBumpActivity(var(q));
-}/*auto*/
+                    
                 }else/*auto*/{
                     out_learnt.push(q);
 }/*auto*/
@@ -513,9 +509,7 @@
             }else{
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
+                    
 }/*auto*/
             }
             seen[x] = 0;
@@ -556,7 +550,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -571,7 +565,7 @@
             if (c[0] == false_lit)/*auto*/{
                 c[0] = c[1], c[1] = false_lit;
 }/*auto*/
-            assert(c[1] == false_lit);
+            
             i++;
 
             // If 0th watch is true, then clause is already satisfied.
@@ -646,7 +640,7 @@
 }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    
 }
 
 
@@ -775,7 +769,7 @@
                 uncheckedEnqueue(learnt_clause[0]);
             }else{
                 CRef cr = ca.alloc(learnt_clause, true);
-                ca[cr].mark(L <= LBD_cut ? 3 : 2);
+                
                 (L <= LBD_cut ? lF : learnts).push(cr);
                 attachClause(cr);
                 if (L > LBD_cut)/*auto*/{
@@ -1059,7 +1053,7 @@
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        static IntOption     opt_luby_restart      (_cat, "luby",        "Use the Luby restart sequence", 0, IntRange(0, 1));
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{

