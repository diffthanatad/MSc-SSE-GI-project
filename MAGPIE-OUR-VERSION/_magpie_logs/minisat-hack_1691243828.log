2023-08-05 14:57:11,530	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = False
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified

[software]
path = code/minisat-hack
target_files = 
	core/Solver.cc.xml
	minisat.params
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
setup_cmd = ./compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 16
compile_lengthout = 
test_cmd = 
test_timeout = 
test_lengthout = 
run_cmd = perf stat run-sh/validate_7.sh
run_timeout = 1582
run_lengthout = 
fitness = perf_instructions

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = ValidTest
possible_edits = 
	StmtReplacement
	StmtInsertion
	StmtDeletion
warmup = 1
warmup_strategy = last
max_steps = 
max_time = 
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5

[search.ga]
pop_size = 10
elitism_size = 2
cxpb_chrm = 0.5
cxpb_gene = 0.5
mutpb_chrm = 0.2
mutpb_gene = 0.1
gi_delete_prob = 0.5
gi_create_prob = 0.5
tournament_size = 3

[search.pso]
pop_size = 10
speed_min = -3
speed_max = 3
c1 = 1.49
c2 = 1.49


2023-08-05 14:57:11,531	[INFO]	==== WARMUP ====
2023-08-05 15:15:40,460	[INFO]	WARM    SUCCESS               1850342448558           
2023-08-05 15:15:40,460	[INFO]	INITIAL SUCCESS               1850342448558           
2023-08-05 15:15:40,461	[INFO]	==== START: ValidTest ====
2023-08-05 15:15:40,579	[DEBUG]	CLEAN_PATCH: StmtDeletion(('core/Solver.cc.xml', 'stmt', 293)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 376)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 259), ('core/Solver.cc.xml', 'stmt', 195)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 66)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80))
2023-08-05 15:15:40,579	[DEBUG]	CLEAN_SIZE: 7 (was 8)
2023-08-05 15:36:29,635	[DEBUG]	StmtDeletion(('core/Solver.cc.xml', 'stmt', 293)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 376)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 259), ('core/Solver.cc.xml', 'stmt', 195)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 66)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80))
2023-08-05 15:36:29,636	[INFO]	1       SUCCESS              *2022581079928 (109.31%) [7 edit(s)] 
2023-08-05 15:36:29,656	[DEBUG]	--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -222,7 +222,7 @@
 
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
@@ -254,7 +254,7 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -342,7 +342,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -631,7 +631,9 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+    if (decisionLevel() == 0)/*auto*/{
+        return;
+}/*auto*/
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -710,7 +712,7 @@
     removeSatisfied(learnts);
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
+        
 }/*auto*/
     checkGarbage();
     rebuildOrderHeap();
@@ -898,7 +900,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        
     }
 
     return progress / nVars();

2023-08-05 15:36:29,670	[INFO]	==== END ====
2023-08-05 15:36:29,670	[INFO]	Reason: validation end
2023-08-05 15:36:29,670	[INFO]	
2023-08-05 15:36:29,671	[INFO]	==== REPORT ====
2023-08-05 15:36:29,671	[INFO]	Termination: validation end
2023-08-05 15:36:29,671	[INFO]	Log file: /cs/student/projects1/sse/2022/tsongpet/MSc-SSE-GI-project/_magpie_logs/minisat-hack_1691243828.log
2023-08-05 15:36:29,684	[INFO]	Patch file: _magpie_logs/minisat-hack_1691243828.patch
2023-08-05 15:36:29,684	[INFO]	Diff file: _magpie_logs/minisat-hack_1691243828.diff
2023-08-05 15:36:29,684	[INFO]	Best fitness: 2022581079928
2023-08-05 15:36:29,684	[INFO]	Best patch: StmtDeletion(('core/Solver.cc.xml', 'stmt', 293)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 376)) | StmtReplacement(('core/Solver.cc.xml', 'stmt', 259), ('core/Solver.cc.xml', 'stmt', 195)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 112)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 66)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 210)) | StmtDeletion(('core/Solver.cc.xml', 'stmt', 80))
2023-08-05 15:36:29,684	[INFO]	Diff:
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -222,7 +222,7 @@
 
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
@@ -254,7 +254,7 @@
     if (locked(c))/*auto*/{ vardata[var(c[0])].reason = CRef_Undef;
 }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -342,7 +342,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
@@ -528,7 +528,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -631,7 +631,9 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+    if (decisionLevel() == 0)/*auto*/{
+        return;
+}/*auto*/
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -710,7 +712,7 @@
     removeSatisfied(learnts);
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
+        
 }/*auto*/
     checkGarbage();
     rebuildOrderHeap();
@@ -898,7 +900,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        
     }
 
     return progress / nVars();

