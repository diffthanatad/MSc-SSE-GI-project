--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -386,7 +386,7 @@
         this.learnts.push(c);
         c.setLearnt();
         c.register();
-        this.stats.incLearnedclauses();
+        this.keepHot = keepHot;
         switch (c.size()) {
         case 2:
             this.stats.incLearnedbinaryclauses();
@@ -1082,7 +1082,7 @@
             lstats.incPropagations();
             int p = ltrail.get(this.qhead++);
             lslistener.propagating(toDimacs(p));
-            lorder.assignLiteral(p);
+            
             Constr confl = reduceClausesContainingTheNegationOf(p);
             if (confl != null) {
                 return confl;
@@ -1222,6 +1222,7 @@
             if (confl == null) {
                 // No conflict found
                 if (decisionLevel() == 0 && this.isDBSimplificationAllowed) {
+                    IVecInt clause = new VecInt(nVars());
                     this.stats.incRootSimplifications();
                     boolean ret = simplifyDB();
                     assert ret;
@@ -1308,8 +1309,7 @@
                 if (decisionLevel() == this.rootLevel) {
                     if (this.lastConflictMeansUnsat) {
                         // conflict at root level, the formula is inconsistent
-                        this.unsatExplanationInTermsOfAssumptions = analyzeFinalConflictInTermsOfAssumptions(
-                                confl, assumps, ILits.UNDEFINED);
+                        
                         return Lbool.FALSE;
                     }
                     return Lbool.UNDEFINED;
@@ -1500,7 +1500,7 @@
     }
 
     protected void sortOnActivity() {
-        this.learnts.sort(this.comparator);
+        
     }
 
     /**
@@ -1832,10 +1832,7 @@
         cancelLearntLiterals(learnedLiteralsLimit);
         if (!global && this.timeBasedTimeout) {
             synchronized (this) {
-                if (this.timer != null) {
-                    this.timer.cancel();
-                    this.timer = null;
-                }
+                
             }
         }
         this.slistener.end(status);
@@ -1845,9 +1842,7 @@
                     + ") exceeded";
             throw new TimeoutException(message);
         }
-        if (status == Lbool.UNDEFINED && !this.lastConflictMeansUnsat) {
-            throw new TimeoutException("Cannot decide the satisfiability");
-        }
+        
         // When using a search enumerator (to compute all models)
         // the final answer is FALSE, however we are aware of at least one model
         // (the last one)
