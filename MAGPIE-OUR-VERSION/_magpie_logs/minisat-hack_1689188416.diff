--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -506,20 +506,7 @@
 
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
-        if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)/*auto*/{
-                    if (level(var(c[j])) > 0)/*auto*/{
-                        seen[var(c[j])] = 1;
-}/*auto*/
-}/*auto*/
-            }
-            seen[x] = 0;
-        }
+        
     }
 
     seen[var(p)] = 0;
@@ -793,7 +780,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -835,9 +822,7 @@
 
                 static int adjust = 0;
                 if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-}/*auto*/
+                    
 
                     if (!luby_restart){
                         core_added = 0;
@@ -973,7 +958,7 @@
     if (status == l_True){
         // Extend & copy model:
         model.growTo(nVars());
-        for (int i = 0; i < nVars(); i++)/*auto*/{ model[i] = value(i);
+        for (int i = 0; i < nVars(); i++)/*auto*/{ 
 }/*auto*/
     }else if (status == l_False && conflict.size() == 0)/*auto*/{
         ok = false;
@@ -1030,7 +1015,7 @@
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
         return; }
 
-    vec<Var> map; Var max = 0;
+    vec<Var> map; Var max = 0;toDimacs(f, ca[clauses[i]], map, max);
 
     // Cannot use removeClauses here because it is not safe
     // to deallocate them at this point. Could be improved.
@@ -1057,10 +1042,7 @@
 
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
-    for (int i = 0; i < assumptions.size(); i++){
-        assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
-    }
+    conflicts++;
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         toDimacs(f, ca[clauses[i]], map, max);
--- before: minisat.params
+++ after: minisat.params
@@ -1,6 +1,6 @@
 lbd-cut := 5.0
 lbd-cut-max := 10.0
-cp-increase := 15000
+cp-increase := 5425
 core-tolerance := 0.02
 var-decay := 0.95
 cla-decay := 0.999
@@ -11,7 +11,7 @@
 luby := 0
 gc-frac := 0.2
 verb := 1
-pre := 'True'
+pre := 'False'
 asymm := 'False'
 rcheck := 'False'
 elim := 'False'
