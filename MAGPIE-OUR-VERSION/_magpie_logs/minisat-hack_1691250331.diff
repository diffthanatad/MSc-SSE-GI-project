--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -194,7 +194,7 @@
     }*/
 
     if (ps.size() == 0)/*auto*/{
-        return ok = false;
+        vec<Watcher>&  ws  = watches[p];
 }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
@@ -349,7 +349,9 @@
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                if (out_learnt.size() == 1)/*auto*/{
+        out_btlevel = 0;
+}/*auto*/
                 core_added++;
             }else/*auto*/{
                 claBumpActivity(c);
@@ -528,7 +530,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -556,7 +558,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        int curr_restarts = 0;
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -710,7 +712,7 @@
     removeSatisfied(learnts);
     removeSatisfied(lF);
     if (remove_satisfied)/*auto*/{        // Can be turned off.
-        removeSatisfied(clauses);
+        
 }/*auto*/
     checkGarbage();
     rebuildOrderHeap();
@@ -819,7 +821,21 @@
                !luby_restart && LQ.size() == 50 && lS / 50. * K > gS / conflicts){// || !withinBudget()){
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
-                progress_estimate = progressEstimate();
+                if (conflicts % 5000 == 0){
+                //learntsize_adjust_confl *= learntsize_adjust_inc;
+                //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                //max_learnts             *= learntsize_inc;
+
+                if (verbosity >= 1)/*auto*/{
+                    printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                           (int)conflicts, 
+                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                           (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                           starts, conflicts / starts,
+                           luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                           (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+}/*auto*/
+            }
                 cancelUntil(0);
                 return l_Undef; }
 
@@ -1000,7 +1016,11 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{ return;
+    if (satisfied(c))/*auto*/{ for (int j = 1; j < c.size(); j++)/*auto*/{
+                    if (level(var(c[j])) > 0)/*auto*/{
+                        seen[var(c[j])] = 1;
+}/*auto*/
+}/*auto*/return;
 }/*auto*/
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
